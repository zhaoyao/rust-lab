DEBUG:racer::util: Getting rust source path. Trying env var RUST_SRC_PATH.
DEBUG:racer::util: Nope. Trying rustc --sysroot and appending lib/rustlib/src/rust/src to that.
PREFIX 106,106,
DEBUG:racer::core: Path: contextstr is |tokio::net|, searchstr is ||
DEBUG:racer::core: Complete path with line: "use tokio::net::"
DEBUG:racer::nameres: resolve_path P[tokio::net::] "src/main.rs" 106 StartsWith
DEBUG:racer::nameres: resolve_path P[tokio::net] "src/main.rs" 106 ExactMatch
DEBUG:racer::nameres: resolve_path P[tokio] "src/main.rs" 106 ExactMatch
DEBUG:racer::nameres: resolve_name tokio "src/main.rs" 106 ExactMatch Type
DEBUG:racer::nameres: search_local_scopes PathSegment { name: "tokio", types: [] } "src/main.rs" 106 ExactMatch Type
DEBUG:racer::nameres: searching scope Type start: 0 point: 106 'tokio' "src/main.rs" ExactMatch local: true, session: Session { .. }
DEBUG:racer::matchers: found an extern crate: |extern crate tokio;|
DEBUG:syntex_syntax::parse::lexer: scanning whitespace: Some(TokenAndSpan { tok: Whitespace, sp: Span { lo: BytePos(6), hi: BytePos(7), expn_id: ExpnId(4294967295) } })
DEBUG:syntex_syntax::codemap: byte pos BytePos(0) is on the line at byte pos BytePos(0)
DEBUG:syntex_syntax::codemap: char pos CharPos(0) is on the line at char pos CharPos(0)
DEBUG:syntex_syntax::codemap: byte is on line: 1
DEBUG:syntex_syntax::parse::attr: parse_outer_attributes: self.token=Ident(extern#0)
DEBUG:syntex_syntax::parse::lexer: scanning whitespace: Some(TokenAndSpan { tok: Whitespace, sp: Span { lo: BytePos(12), hi: BytePos(13), expn_id: ExpnId(4294967295) } })
DEBUG:racer::matchers: extern crate tokio
DEBUG:racer::nameres: get_crate_file tokio, "src/main.rs"
DEBUG:racer::cargo: get_crate_file: from_path="src/main.rs"
DEBUG:racer::cargo: get_cargo_packages found lock_table {"metadata": Table({"checksum arrayvec 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)": String("a1e964f9e24d588183fcb43503abda40d288c8657dfc27311516ce2f05675aef"), "checksum bitflags 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)": String("b3c30d3802dfb7281680d6285f2ccdaa8c2d8fee41f93805dba5c4cf50dc23cf"), "checksum byteorder 1.2.2 (registry+https://github.com/rust-lang/crates.io-index)": String("73b5bdfe7ee3ad0b99c9801d58807a9dbc9e09196365b0203853b99889ab3c87"), "checksum bytes 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)": String("1b7db437d718977f6dc9b2e3fd6fc343c02ac6b899b73fdd2179163447bd9ce9"), "checksum cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)": String("d4c819a1287eb618df47cc647173c5c4c66ba19d888a6e50d605672aed3140de"), "checksum crossbeam-deque 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)": String("c1bdc73742c36f7f35ebcda81dbb33a7e0d33757d03a06d9ddca762712ec5ea2"), "checksum crossbeam-epoch 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)": String("9b4e2817eb773f770dcb294127c011e22771899c21d18fce7dd739c0b9832e81"), "checksum crossbeam-utils 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)": String("2760899e32a1d58d5abb31129f8fae5de75220bc2176e77ff7c627ae45c918d9"), "checksum crossbeam-utils 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)": String("d636a8b3bcc1b409d7ffd3facef8f21dcb4009626adbd0c5e6c4305c07253c7b"), "checksum fuchsia-zircon 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)": String("2e9763c69ebaae630ba35f74888db465e49e259ba1bc0eda7d06f4a067615d82"), "checksum fuchsia-zircon-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)": String("3dcaa9ae7725d12cdb85b3ad99a434db70b468c09ded17e012d86b5c1010f7a7"), "checksum futures 0.1.21 (registry+https://github.com/rust-lang/crates.io-index)": String("1a70b146671de62ec8c8ed572219ca5d594d9b06c0b364d5e67b722fc559b48c"), "checksum iovec 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)": String("dbe6e417e7d0975db6512b90796e8ce223145ac4e33c377e4a42882a0e88bb08"), "checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)": String("7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d"), "checksum lazy_static 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)": String("c8f31047daa365f19be14b47c29df4f7c3b581832407daabe6ae77397619237d"), "checksum lazycell 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)": String("a6f08839bc70ef4a3fe1d566d5350f519c5912ea86be0df1740a7d247c7fc0ef"), "checksum libc 0.2.40 (registry+https://github.com/rust-lang/crates.io-index)": String("6fd41f331ac7c5b8ac259b8bf82c75c0fb2e469bbf37d2becbba9a6a2221965b"), "checksum log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)": String("89f010e843f2b1a31dbd316b3b8d443758bc634bed37aabade59c686d644e0a2"), "checksum memoffset 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)": String("0f9dc261e2b62d7a622bf416ea3c5245cdd5d9a7fcc428c0d06804dfce1775b3"), "checksum mio 0.6.14 (registry+https://github.com/rust-lang/crates.io-index)": String("6d771e3ef92d58a8da8df7d6976bfca9371ed1de6619d9d5a5ce5b1f29b85bfe"), "checksum miow 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)": String("8c1f2f3b1cf331de6896aabf6e9d55dca90356cc9960cca7eaaf408a355ae919"), "checksum net2 0.2.32 (registry+https://github.com/rust-lang/crates.io-index)": String("9044faf1413a1057267be51b5afba8eb1090bd2231c693664aa1db716fe1eae0"), "checksum nodrop 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)": String("9a2228dca57108069a5262f2ed8bd2e82496d2e074a06d1ccc7ce1687b6ae0a2"), "checksum num_cpus 1.8.0 (registry+https://github.com/rust-lang/crates.io-index)": String("c51a3322e4bca9d212ad9a158a02abc6934d005490c054a2778df73a70aa0a30"), "checksum rand 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)": String("eba5f8cb59cc50ed56be8880a5c7b496bfd9bd26394e176bc67884094145c2c5"), "checksum scopeguard 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)": String("94258f53601af11e6a49f722422f6e3425c52b06245a5cf9bc09908b174f5e27"), "checksum slab 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)": String("fdeff4cd9ecff59ec7e3744cbca73dfe5ac35c2aedb2cfba8a1c715a18912e9d"), "checksum tokio 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)": String("be15ef40f675c9fe66e354d74c73f3ed012ca1aa14d65846a33ee48f1ae8d922"), "checksum tokio-executor 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)": String("8cac2a7883ff3567e9d66bb09100d09b33d90311feca0206c7ca034bc0c55113"), "checksum tokio-io 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)": String("6af9eb326f64b2d6b68438e1953341e00ab3cf54de7e35d92bfc73af8555313a"), "checksum tokio-reactor 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)": String("b3cedc8e5af5131dc3423ffa4f877cce78ad25259a9a62de0613735a13ebc64b"), "checksum tokio-tcp 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)": String("ec9b094851aadd2caf83ba3ad8e8c4ce65a42104f7b94d9e6550023f0407853f"), "checksum tokio-threadpool 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)": String("bf3d05cdd6a78005e535d2b27c21521bdf91fbb321027a62d8e178929d18966d"), "checksum tokio-timer 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)": String("29a89e4ad0c8f1e4c9860e605c38c69bfdad3cccd4ea446e58ff588c1c07a397"), "checksum tokio-udp 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)": String("137bda266504893ac4774e0ec4c2108f7ccdbcb7ac8dced6305fe9e4e0b5041a"), "checksum winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)": String("167dc9d6949a9b857f3451275e911c3f44255842c1f7a76f33c55103a909087a"), "checksum winapi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)": String("04e3bd221fcbe8a271359c04f21a76db7d0c6028862d1bb5512d85e1e2eb5bb3"), "checksum winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)": String("2d315eee3b34aca4797b2da6b13ed88266e6d612562a0c46390af8299fc699bc"), "checksum winapi-i686-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)": String("ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6"), "checksum winapi-x86_64-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)": String("712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"), "checksum ws2_32-sys 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)": String("d59cefebd0c892fa2dd6de581e937301d8552cb44489cdff035c6187cb63fa5e")}), "package": Array([Table({"dependencies": Array([String("nodrop 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)")]), "name": String("arrayvec"), "source": String("registry+https://github.com/rust-lang/crates.io-index"), "version": String("0.4.7")}), Table({"name": String("bitflags"), "source": String("registry+https://github.com/rust-lang/crates.io-index"), "version": String("1.0.1")}), Table({"name": String("byteorder"), "source": String("registry+https://github.com/rust-lang/crates.io-index"), "version": String("1.2.2")}), Table({"dependencies": Array([String("byteorder 1.2.2 (registry+https://github.com/rust-lang/crates.io-index)"), String("iovec 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)")]), "name": String("bytes"), "source": String("registry+https://github.com/rust-lang/crates.io-index"), "version": String("0.4.6")}), Table({"name": String("cfg-if"), "source": String("registry+https://github.com/rust-lang/crates.io-index"), "version": String("0.1.2")}), Table({"dependencies": Array([String("crossbeam-epoch 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)"), String("crossbeam-utils 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)")]), "name": String("crossbeam-deque"), "source": String("registry+https://github.com/rust-lang/crates.io-index"), "version": String("0.3.0")}), Table({"dependencies": Array([String("arrayvec 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)"), String("cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)"), String("crossbeam-utils 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)"), String("lazy_static 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)"), String("memoffset 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)"), String("scopeguard 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)")]), "name": String("crossbeam-epoch"), "source": String("registry+https://github.com/rust-lang/crates.io-index"), "version": String("0.4.1")}), Table({"dependencies": Array([String("cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)")]), "name": String("crossbeam-utils"), "source": String("registry+https://github.com/rust-lang/crates.io-index"), "version": String("0.2.2")}), Table({"dependencies": Array([String("cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)")]), "name": String("crossbeam-utils"), "source": String("registry+https://github.com/rust-lang/crates.io-index"), "version": String("0.3.2")}), Table({"dependencies": Array([String("bitflags 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)"), String("fuchsia-zircon-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)")]), "name": String("fuchsia-zircon"), "source": String("registry+https://github.com/rust-lang/crates.io-index"), "version": String("0.3.3")}), Table({"name": String("fuchsia-zircon-sys"), "source": String("registry+https://github.com/rust-lang/crates.io-index"), "version": String("0.3.3")}), Table({"name": String("futures"), "source": String("registry+https://github.com/rust-lang/crates.io-index"), "version": String("0.1.21")}), Table({"dependencies": Array([String("libc 0.2.40 (registry+https://github.com/rust-lang/crates.io-index)"), String("winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)")]), "name": String("iovec"), "source": String("registry+https://github.com/rust-lang/crates.io-index"), "version": String("0.1.2")}), Table({"dependencies": Array([String("winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)"), String("winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)")]), "name": String("kernel32-sys"), "source": String("registry+https://github.com/rust-lang/crates.io-index"), "version": String("0.2.2")}), Table({"name": String("lazy_static"), "source": String("registry+https://github.com/rust-lang/crates.io-index"), "version": String("1.0.0")}), Table({"name": String("lazycell"), "source": String("registry+https://github.com/rust-lang/crates.io-index"), "version": String("0.6.0")}), Table({"name": String("libc"), "source": String("registry+https://github.com/rust-lang/crates.io-index"), "version": String("0.2.40")}), Table({"dependencies": Array([String("cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)")]), "name": String("log"), "source": String("registry+https://github.com/rust-lang/crates.io-index"), "version": String("0.4.1")}), Table({"name": String("memoffset"), "source": String("registry+https://github.com/rust-lang/crates.io-index"), "version": String("0.2.1")}), Table({"dependencies": Array([String("fuchsia-zircon 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)"), String("fuchsia-zircon-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)"), String("iovec 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)"), String("kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)"), String("lazycell 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)"), String("libc 0.2.40 (registry+https://github.com/rust-lang/crates.io-index)"), String("log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)"), String("miow 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)"), String("net2 0.2.32 (registry+https://github.com/rust-lang/crates.io-index)"), String("slab 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)"), String("winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)")]), "name": String("mio"), "source": String("registry+https://github.com/rust-lang/crates.io-index"), "version": String("0.6.14")}), Table({"dependencies": Array([String("kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)"), String("net2 0.2.32 (registry+https://github.com/rust-lang/crates.io-index)"), String("winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)"), String("ws2_32-sys 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)")]), "name": String("miow"), "source": String("registry+https://github.com/rust-lang/crates.io-index"), "version": String("0.2.1")}), Table({"dependencies": Array([String("cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)"), String("libc 0.2.40 (registry+https://github.com/rust-lang/crates.io-index)"), String("winapi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)")]), "name": String("net2"), "source": String("registry+https://github.com/rust-lang/crates.io-index"), "version": String("0.2.32")}), Table({"name": String("nodrop"), "source": String("registry+https://github.com/rust-lang/crates.io-index"), "version": String("0.1.12")}), Table({"dependencies": Array([String("libc 0.2.40 (registry+https://github.com/rust-lang/crates.io-index)")]), "name": String("num_cpus"), "source": String("registry+https://github.com/rust-lang/crates.io-index"), "version": String("1.8.0")}), Table({"dependencies": Array([String("fuchsia-zircon 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)"), String("libc 0.2.40 (registry+https://github.com/rust-lang/crates.io-index)"), String("winapi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)")]), "name": String("rand"), "source": String("registry+https://github.com/rust-lang/crates.io-index"), "version": String("0.4.2")}), Table({"name": String("scopeguard"), "source": String("registry+https://github.com/rust-lang/crates.io-index"), "version": String("0.3.3")}), Table({"name": String("slab"), "source": String("registry+https://github.com/rust-lang/crates.io-index"), "version": String("0.4.0")}), Table({"dependencies": Array([String("tokio 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)"), String("tokio-tcp 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)")]), "name": String("socks5"), "version": String("0.1.0")}), Table({"dependencies": Array([String("futures 0.1.21 (registry+https://github.com/rust-lang/crates.io-index)"), String("mio 0.6.14 (registry+https://github.com/rust-lang/crates.io-index)"), String("tokio-executor 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)"), String("tokio-io 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)"), String("tokio-reactor 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)"), String("tokio-tcp 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)"), String("tokio-threadpool 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)"), String("tokio-timer 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)"), String("tokio-udp 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)")]), "name": String("tokio"), "source": String("registry+https://github.com/rust-lang/crates.io-index"), "version": String("0.1.5")}), Table({"dependencies": Array([String("futures 0.1.21 (registry+https://github.com/rust-lang/crates.io-index)")]), "name": String("tokio-executor"), "source": String("registry+https://github.com/rust-lang/crates.io-index"), "version": String("0.1.2")}), Table({"dependencies": Array([String("bytes 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)"), String("futures 0.1.21 (registry+https://github.com/rust-lang/crates.io-index)"), String("log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)")]), "name": String("tokio-io"), "source": String("registry+https://github.com/rust-lang/crates.io-index"), "version": String("0.1.6")}), Table({"dependencies": Array([String("futures 0.1.21 (registry+https://github.com/rust-lang/crates.io-index)"), String("log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)"), String("mio 0.6.14 (registry+https://github.com/rust-lang/crates.io-index)"), String("slab 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)"), String("tokio-executor 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)"), String("tokio-io 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)")]), "name": String("tokio-reactor"), "source": String("registry+https://github.com/rust-lang/crates.io-index"), "version": String("0.1.1")}), Table({"dependencies": Array([String("bytes 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)"), String("futures 0.1.21 (registry+https://github.com/rust-lang/crates.io-index)"), String("iovec 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)"), String("mio 0.6.14 (registry+https://github.com/rust-lang/crates.io-index)"), String("tokio-io 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)"), String("tokio-reactor 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)")]), "name": String("tokio-tcp"), "source": String("registry+https://github.com/rust-lang/crates.io-index"), "version": String("0.1.0")}), Table({"dependencies": Array([String("crossbeam-deque 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)"), String("futures 0.1.21 (registry+https://github.com/rust-lang/crates.io-index)"), String("log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)"), String("num_cpus 1.8.0 (registry+https://github.com/rust-lang/crates.io-index)"), String("rand 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)"), String("tokio-executor 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)")]), "name": String("tokio-threadpool"), "source": String("registry+https://github.com/rust-lang/crates.io-index"), "version": String("0.1.2")}), Table({"dependencies": Array([String("futures 0.1.21 (registry+https://github.com/rust-lang/crates.io-index)"), String("tokio-executor 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)")]), "name": String("tokio-timer"), "source": String("registry+https://github.com/rust-lang/crates.io-index"), "version": String("0.2.1")}), Table({"dependencies": Array([String("bytes 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)"), String("futures 0.1.21 (registry+https://github.com/rust-lang/crates.io-index)"), String("log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)"), String("mio 0.6.14 (registry+https://github.com/rust-lang/crates.io-index)"), String("tokio-io 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)"), String("tokio-reactor 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)")]), "name": String("tokio-udp"), "source": String("registry+https://github.com/rust-lang/crates.io-index"), "version": String("0.1.0")}), Table({"name": String("winapi"), "source": String("registry+https://github.com/rust-lang/crates.io-index"), "version": String("0.2.8")}), Table({"dependencies": Array([String("winapi-i686-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)"), String("winapi-x86_64-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)")]), "name": String("winapi"), "source": String("registry+https://github.com/rust-lang/crates.io-index"), "version": String("0.3.4")}), Table({"name": String("winapi-build"), "source": String("registry+https://github.com/rust-lang/crates.io-index"), "version": String("0.1.1")}), Table({"name": String("winapi-i686-pc-windows-gnu"), "source": String("registry+https://github.com/rust-lang/crates.io-index"), "version": String("0.4.0")}), Table({"name": String("winapi-x86_64-pc-windows-gnu"), "source": String("registry+https://github.com/rust-lang/crates.io-index"), "version": String("0.4.0")}), Table({"dependencies": Array([String("winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)"), String("winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)")]), "name": String("ws2_32-sys"), "source": String("registry+https://github.com/rust-lang/crates.io-index"), "version": String("0.2.1")})])}
DEBUG:racer::cargo: get_cargo_rootdir. "Cargo.lock"
DEBUG:racer::cargo: get_versioned_cratefile: cargo rootdir is "/Users/zhaoyao/.cargo"
DEBUG:racer::cargo: crate path "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/arrayvec-0.4.7/src"
DEBUG:racer::cargo: crate path with lib.rs "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/arrayvec-0.4.7/src/lib.rs"
DEBUG:racer::cargo: get_cargo_rootdir. "Cargo.lock"
DEBUG:racer::cargo: get_versioned_cratefile: cargo rootdir is "/Users/zhaoyao/.cargo"
DEBUG:racer::cargo: crate path "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.0.1/src"
DEBUG:racer::cargo: crate path with lib.rs "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.0.1/src/lib.rs"
DEBUG:racer::cargo: get_cargo_rootdir. "Cargo.lock"
DEBUG:racer::cargo: get_versioned_cratefile: cargo rootdir is "/Users/zhaoyao/.cargo"
DEBUG:racer::cargo: crate path "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src"
DEBUG:racer::cargo: crate path with lib.rs "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.2/src/lib.rs"
DEBUG:racer::cargo: get_cargo_rootdir. "Cargo.lock"
DEBUG:racer::cargo: get_versioned_cratefile: cargo rootdir is "/Users/zhaoyao/.cargo"
DEBUG:racer::cargo: crate path "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-0.4.6/src"
DEBUG:racer::cargo: crate path with lib.rs "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/bytes-0.4.6/src/lib.rs"
DEBUG:racer::cargo: get_cargo_rootdir. "Cargo.lock"
DEBUG:racer::cargo: get_versioned_cratefile: cargo rootdir is "/Users/zhaoyao/.cargo"
DEBUG:racer::cargo: crate path "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/cfg-if-0.1.2/src"
DEBUG:racer::cargo: crate path with lib.rs "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/cfg-if-0.1.2/src/lib.rs"
DEBUG:racer::cargo: get_cargo_rootdir. "Cargo.lock"
DEBUG:racer::cargo: get_versioned_cratefile: cargo rootdir is "/Users/zhaoyao/.cargo"
DEBUG:racer::cargo: crate path "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-deque-0.3.0/src"
DEBUG:racer::cargo: crate path with lib.rs "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-deque-0.3.0/src/lib.rs"
DEBUG:racer::cargo: get_cargo_rootdir. "Cargo.lock"
DEBUG:racer::cargo: get_versioned_cratefile: cargo rootdir is "/Users/zhaoyao/.cargo"
DEBUG:racer::cargo: crate path "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-epoch-0.4.1/src"
DEBUG:racer::cargo: crate path with lib.rs "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-epoch-0.4.1/src/lib.rs"
DEBUG:racer::cargo: get_cargo_rootdir. "Cargo.lock"
DEBUG:racer::cargo: get_versioned_cratefile: cargo rootdir is "/Users/zhaoyao/.cargo"
DEBUG:racer::cargo: crate path "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-utils-0.2.2/src"
DEBUG:racer::cargo: crate path with lib.rs "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-utils-0.2.2/src/lib.rs"
DEBUG:racer::cargo: get_cargo_rootdir. "Cargo.lock"
DEBUG:racer::cargo: get_versioned_cratefile: cargo rootdir is "/Users/zhaoyao/.cargo"
DEBUG:racer::cargo: crate path "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-utils-0.3.2/src"
DEBUG:racer::cargo: crate path with lib.rs "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/crossbeam-utils-0.3.2/src/lib.rs"
DEBUG:racer::cargo: get_cargo_rootdir. "Cargo.lock"
DEBUG:racer::cargo: get_versioned_cratefile: cargo rootdir is "/Users/zhaoyao/.cargo"
DEBUG:racer::cargo: crate path "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/fuchsia-zircon-0.3.3/src"
DEBUG:racer::cargo: crate path with lib.rs "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/fuchsia-zircon-0.3.3/src/lib.rs"
DEBUG:racer::cargo: get_cargo_rootdir. "Cargo.lock"
DEBUG:racer::cargo: get_versioned_cratefile: cargo rootdir is "/Users/zhaoyao/.cargo"
DEBUG:racer::cargo: crate path "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/fuchsia-zircon-sys-0.3.3/src"
DEBUG:racer::cargo: crate path with lib.rs "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/fuchsia-zircon-sys-0.3.3/src/lib.rs"
DEBUG:racer::cargo: get_cargo_rootdir. "Cargo.lock"
DEBUG:racer::cargo: get_versioned_cratefile: cargo rootdir is "/Users/zhaoyao/.cargo"
DEBUG:racer::cargo: crate path "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.21/src"
DEBUG:racer::cargo: crate path with lib.rs "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.21/src/lib.rs"
DEBUG:racer::cargo: get_cargo_rootdir. "Cargo.lock"
DEBUG:racer::cargo: get_versioned_cratefile: cargo rootdir is "/Users/zhaoyao/.cargo"
DEBUG:racer::cargo: crate path "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/iovec-0.1.2/src"
DEBUG:racer::cargo: crate path with lib.rs "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/iovec-0.1.2/src/lib.rs"
DEBUG:racer::cargo: get_cargo_rootdir. "Cargo.lock"
DEBUG:racer::cargo: get_versioned_cratefile: cargo rootdir is "/Users/zhaoyao/.cargo"
DEBUG:racer::cargo: crate path "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/kernel32-sys-0.2.2/src"
DEBUG:racer::cargo: crate path with lib.rs "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/kernel32-sys-0.2.2/src/lib.rs"
DEBUG:racer::cargo: get_cargo_rootdir. "Cargo.lock"
DEBUG:racer::cargo: get_versioned_cratefile: cargo rootdir is "/Users/zhaoyao/.cargo"
DEBUG:racer::cargo: crate path "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.0.0/src"
DEBUG:racer::cargo: crate path with lib.rs "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.0.0/src/lib.rs"
DEBUG:racer::cargo: get_cargo_rootdir. "Cargo.lock"
DEBUG:racer::cargo: get_versioned_cratefile: cargo rootdir is "/Users/zhaoyao/.cargo"
DEBUG:racer::cargo: crate path "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-0.6.0/src"
DEBUG:racer::cargo: crate path with lib.rs "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-0.6.0/src/lib.rs"
DEBUG:racer::cargo: get_cargo_rootdir. "Cargo.lock"
DEBUG:racer::cargo: get_versioned_cratefile: cargo rootdir is "/Users/zhaoyao/.cargo"
DEBUG:racer::cargo: crate path "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/libc-0.2.40/src"
DEBUG:racer::cargo: crate path with lib.rs "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/libc-0.2.40/src/lib.rs"
DEBUG:racer::cargo: get_cargo_rootdir. "Cargo.lock"
DEBUG:racer::cargo: get_versioned_cratefile: cargo rootdir is "/Users/zhaoyao/.cargo"
DEBUG:racer::cargo: crate path "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.1/src"
DEBUG:racer::cargo: crate path with lib.rs "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.1/src/lib.rs"
DEBUG:racer::cargo: get_cargo_rootdir. "Cargo.lock"
DEBUG:racer::cargo: get_versioned_cratefile: cargo rootdir is "/Users/zhaoyao/.cargo"
DEBUG:racer::cargo: crate path "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/memoffset-0.2.1/src"
DEBUG:racer::cargo: crate path with lib.rs "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/memoffset-0.2.1/src/lib.rs"
DEBUG:racer::cargo: get_cargo_rootdir. "Cargo.lock"
DEBUG:racer::cargo: get_versioned_cratefile: cargo rootdir is "/Users/zhaoyao/.cargo"
DEBUG:racer::cargo: crate path "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-0.6.14/src"
DEBUG:racer::cargo: crate path with lib.rs "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/mio-0.6.14/src/lib.rs"
DEBUG:racer::cargo: get_cargo_rootdir. "Cargo.lock"
DEBUG:racer::cargo: get_versioned_cratefile: cargo rootdir is "/Users/zhaoyao/.cargo"
DEBUG:racer::cargo: crate path "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/miow-0.2.1/src"
DEBUG:racer::cargo: crate path with lib.rs "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/miow-0.2.1/src/lib.rs"
DEBUG:racer::cargo: get_cargo_rootdir. "Cargo.lock"
DEBUG:racer::cargo: get_versioned_cratefile: cargo rootdir is "/Users/zhaoyao/.cargo"
DEBUG:racer::cargo: crate path "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/net2-0.2.32/src"
DEBUG:racer::cargo: crate path with lib.rs "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/net2-0.2.32/src/lib.rs"
DEBUG:racer::cargo: get_cargo_rootdir. "Cargo.lock"
DEBUG:racer::cargo: get_versioned_cratefile: cargo rootdir is "/Users/zhaoyao/.cargo"
DEBUG:racer::cargo: crate path "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/nodrop-0.1.12/src"
DEBUG:racer::cargo: crate path with lib.rs "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/nodrop-0.1.12/src/lib.rs"
DEBUG:racer::cargo: get_cargo_rootdir. "Cargo.lock"
DEBUG:racer::cargo: get_versioned_cratefile: cargo rootdir is "/Users/zhaoyao/.cargo"
DEBUG:racer::cargo: crate path "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/num_cpus-1.8.0/src"
DEBUG:racer::cargo: crate path with lib.rs "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/num_cpus-1.8.0/src/lib.rs"
DEBUG:racer::cargo: get_cargo_rootdir. "Cargo.lock"
DEBUG:racer::cargo: get_versioned_cratefile: cargo rootdir is "/Users/zhaoyao/.cargo"
DEBUG:racer::cargo: crate path "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.4.2/src"
DEBUG:racer::cargo: crate path with lib.rs "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.4.2/src/lib.rs"
DEBUG:racer::cargo: get_cargo_rootdir. "Cargo.lock"
DEBUG:racer::cargo: get_versioned_cratefile: cargo rootdir is "/Users/zhaoyao/.cargo"
DEBUG:racer::cargo: crate path "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/scopeguard-0.3.3/src"
DEBUG:racer::cargo: crate path with lib.rs "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/scopeguard-0.3.3/src/lib.rs"
DEBUG:racer::cargo: get_cargo_rootdir. "Cargo.lock"
DEBUG:racer::cargo: get_versioned_cratefile: cargo rootdir is "/Users/zhaoyao/.cargo"
DEBUG:racer::cargo: crate path "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/slab-0.4.0/src"
DEBUG:racer::cargo: crate path with lib.rs "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/slab-0.4.0/src/lib.rs"
DEBUG:racer::cargo: get_cargo_packages skipping socks5
DEBUG:racer::cargo: get_cargo_rootdir. "Cargo.lock"
DEBUG:racer::cargo: get_versioned_cratefile: cargo rootdir is "/Users/zhaoyao/.cargo"
DEBUG:racer::cargo: crate path "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src"
DEBUG:racer::cargo: crate path with lib.rs "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs"
DEBUG:racer::cargo: get_cargo_rootdir. "Cargo.lock"
DEBUG:racer::cargo: get_versioned_cratefile: cargo rootdir is "/Users/zhaoyao/.cargo"
DEBUG:racer::cargo: crate path "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-executor-0.1.2/src"
DEBUG:racer::cargo: crate path with lib.rs "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-executor-0.1.2/src/lib.rs"
DEBUG:racer::cargo: get_cargo_rootdir. "Cargo.lock"
DEBUG:racer::cargo: get_versioned_cratefile: cargo rootdir is "/Users/zhaoyao/.cargo"
DEBUG:racer::cargo: crate path "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-io-0.1.6/src"
DEBUG:racer::cargo: crate path with lib.rs "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-io-0.1.6/src/lib.rs"
DEBUG:racer::cargo: get_cargo_rootdir. "Cargo.lock"
DEBUG:racer::cargo: get_versioned_cratefile: cargo rootdir is "/Users/zhaoyao/.cargo"
DEBUG:racer::cargo: crate path "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-reactor-0.1.1/src"
DEBUG:racer::cargo: crate path with lib.rs "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-reactor-0.1.1/src/lib.rs"
DEBUG:racer::cargo: get_cargo_rootdir. "Cargo.lock"
DEBUG:racer::cargo: get_versioned_cratefile: cargo rootdir is "/Users/zhaoyao/.cargo"
DEBUG:racer::cargo: crate path "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-tcp-0.1.0/src"
DEBUG:racer::cargo: crate path with lib.rs "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-tcp-0.1.0/src/lib.rs"
DEBUG:racer::cargo: get_cargo_rootdir. "Cargo.lock"
DEBUG:racer::cargo: get_versioned_cratefile: cargo rootdir is "/Users/zhaoyao/.cargo"
DEBUG:racer::cargo: crate path "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-threadpool-0.1.2/src"
DEBUG:racer::cargo: crate path with lib.rs "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-threadpool-0.1.2/src/lib.rs"
DEBUG:racer::cargo: get_cargo_rootdir. "Cargo.lock"
DEBUG:racer::cargo: get_versioned_cratefile: cargo rootdir is "/Users/zhaoyao/.cargo"
DEBUG:racer::cargo: crate path "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-timer-0.2.1/src"
DEBUG:racer::cargo: crate path with lib.rs "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-timer-0.2.1/src/lib.rs"
DEBUG:racer::cargo: get_cargo_rootdir. "Cargo.lock"
DEBUG:racer::cargo: get_versioned_cratefile: cargo rootdir is "/Users/zhaoyao/.cargo"
DEBUG:racer::cargo: crate path "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-udp-0.1.0/src"
DEBUG:racer::cargo: crate path with lib.rs "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-udp-0.1.0/src/lib.rs"
DEBUG:racer::cargo: get_cargo_rootdir. "Cargo.lock"
DEBUG:racer::cargo: get_versioned_cratefile: cargo rootdir is "/Users/zhaoyao/.cargo"
DEBUG:racer::cargo: crate path "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/winapi-0.2.8/src"
DEBUG:racer::cargo: crate path with lib.rs "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/winapi-0.2.8/src/lib.rs"
DEBUG:racer::cargo: get_cargo_rootdir. "Cargo.lock"
DEBUG:racer::cargo: get_versioned_cratefile: cargo rootdir is "/Users/zhaoyao/.cargo"
DEBUG:racer::cargo: crate path "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/winapi-0.3.4/src"
DEBUG:racer::cargo: crate path with lib.rs "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/winapi-0.3.4/src/lib.rs"
DEBUG:racer::cargo: get_cargo_rootdir. "Cargo.lock"
DEBUG:racer::cargo: get_versioned_cratefile: cargo rootdir is "/Users/zhaoyao/.cargo"
DEBUG:racer::cargo: crate path "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/winapi-build-0.1.1/src"
DEBUG:racer::cargo: crate path with lib.rs "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/winapi-build-0.1.1/src/lib.rs"
DEBUG:racer::cargo: get_cargo_rootdir. "Cargo.lock"
DEBUG:racer::cargo: get_versioned_cratefile: cargo rootdir is "/Users/zhaoyao/.cargo"
DEBUG:racer::cargo: crate path "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/winapi-i686-pc-windows-gnu-0.4.0/src"
DEBUG:racer::cargo: crate path with lib.rs "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/winapi-i686-pc-windows-gnu-0.4.0/src/lib.rs"
DEBUG:racer::cargo: get_cargo_rootdir. "Cargo.lock"
DEBUG:racer::cargo: get_versioned_cratefile: cargo rootdir is "/Users/zhaoyao/.cargo"
DEBUG:racer::cargo: crate path "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/winapi-x86_64-pc-windows-gnu-0.4.0/src"
DEBUG:racer::cargo: crate path with lib.rs "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/winapi-x86_64-pc-windows-gnu-0.4.0/src/lib.rs"
DEBUG:racer::cargo: get_cargo_rootdir. "Cargo.lock"
DEBUG:racer::cargo: get_versioned_cratefile: cargo rootdir is "/Users/zhaoyao/.cargo"
DEBUG:racer::cargo: crate path "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/ws2_32-sys-0.2.1/src"
DEBUG:racer::cargo: crate path with lib.rs "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/ws2_32-sys-0.2.1/src/lib.rs"
DEBUG:racer::cargo: get_package_name found lock_table {"bench": Array([Table({"harness": Boolean(false), "name": String("extend")}), Table({"harness": Boolean(false), "name": String("arraystring")})]), "dependencies": Table({"nodrop": Table({"default-features": Boolean(false), "version": String("0.1.12")}), "serde": Table({"default-features": Boolean(false), "optional": Boolean(true), "version": String("1.0")})}), "dev-dependencies": Table({"bencher": Table({"version": String("0.1.4")}), "matches": Table({"version": String("0.1")}), "serde_test": Table({"version": String("1.0")})}), "features": Table({"default": Array([String("std")]), "serde-1": Array([String("serde")]), "std": Array([]), "use_union": Array([])}), "package": Table({"authors": Array([String("bluss")]), "categories": Array([String("data-structures"), String("no-std")]), "description": String("A vector with fixed capacity, backed by an array (it can be stored on the stack too). Implements fixed capacity ArrayVec and ArrayString."), "documentation": String("https://docs.rs/arrayvec/"), "keywords": Array([String("stack"), String("vector"), String("array"), String("data-structure"), String("no_std")]), "license": String("MIT/Apache-2.0"), "metadata": Table({"docs": Table({"rs": Table({"features": Array([String("serde-1")])})}), "release": Table({"no-dev-version": Boolean(true)})}), "name": String("arrayvec"), "repository": String("https://github.com/bluss/arrayvec"), "version": String("0.4.7")})}
DEBUG:racer::cargo: find_src_via_lockfile package_name: arrayvec
DEBUG:racer::cargo: get_package_name found lock_table {"badges": Table({"travis-ci": Table({"repository": String("rust-lang-nursery/bitflags")})}), "features": Table({"default": Array([String("example_generated")]), "example_generated": Array([])}), "package": Table({"authors": Array([String("The Rust Project Developers")]), "categories": Array([String("no-std")]), "description": String("A macro to generate structures which behave like bitflags.\n"), "documentation": String("https://docs.rs/bitflags"), "homepage": String("https://github.com/rust-lang-nursery/bitflags"), "keywords": Array([String("bit"), String("bitmask"), String("bitflags"), String("flags")]), "license": String("MIT/Apache-2.0"), "name": String("bitflags"), "readme": String("README.md"), "repository": String("https://github.com/rust-lang-nursery/bitflags"), "version": String("1.0.1")})}
DEBUG:racer::cargo: find_src_via_lockfile package_name: bitflags
DEBUG:racer::cargo: get_package_name found lock_table {"badges": Table({"travis-ci": Table({"repository": String("BurntSushi/byteorder")})}), "dev-dependencies": Table({"quickcheck": Table({"default-features": Boolean(false), "version": String("0.6")}), "rand": Table({"version": String("0.4")})}), "features": Table({"default": Array([String("std")]), "i128": Array([]), "std": Array([])}), "lib": Table({"bench": Boolean(false), "name": String("byteorder")}), "package": Table({"authors": Array([String("Andrew Gallant <jamslam@gmail.com>")]), "categories": Array([String("encoding"), String("parsing")]), "description": String("Library for reading/writing numbers in big-endian and little-endian."), "documentation": String("https://docs.rs/byteorder"), "homepage": String("https://github.com/BurntSushi/byteorder"), "keywords": Array([String("byte"), String("endian"), String("big-endian"), String("little-endian"), String("binary")]), "license": String("Unlicense/MIT"), "name": String("byteorder"), "readme": String("README.md"), "repository": String("https://github.com/BurntSushi/byteorder"), "version": String("1.2.2")}), "profile": Table({"bench": Table({"opt-level": Integer(3)})})}
DEBUG:racer::cargo: find_src_via_lockfile package_name: byteorder
DEBUG:racer::cargo: get_package_name found lock_table {"dependencies": Table({"byteorder": Table({"version": String("1.0.0")}), "iovec": Table({"version": String("0.1")}), "serde": Table({"optional": Boolean(true), "version": String("1.0")})}), "dev-dependencies": Table({"serde_test": Table({"version": String("1.0")})}), "package": Table({"authors": Array([String("Carl Lerche <me@carllerche.com>")]), "categories": Array([String("network-programming"), String("data-structures")]), "description": String("Types and traits for working with bytes"), "documentation": String("https://carllerche.github.io/bytes/bytes"), "exclude": Array([String(".gitignore"), String(".travis.yml"), String("deploy.sh"), String("bench/**/*"), String("test/**/*")]), "homepage": String("https://github.com/carllerche/bytes"), "keywords": Array([String("buffers"), String("zero-copy"), String("io")]), "license": String("MIT/Apache-2.0"), "name": String("bytes"), "readme": String("README.md"), "repository": String("https://github.com/carllerche/bytes"), "version": String("0.4.6")})}
DEBUG:racer::cargo: find_src_via_lockfile package_name: bytes
DEBUG:racer::cargo: get_package_name found lock_table {"package": Table({"authors": Array([String("Alex Crichton <alex@alexcrichton.com>")]), "description": String("A macro to ergonomically define an item depending on a large number of #[cfg]\nparameters. Structured like an if-else chain, the first matching branch is the\nitem that gets emitted.\n"), "documentation": String("http://alexcrichton.com/cfg-if"), "homepage": String("https://github.com/alexcrichton/cfg-if"), "license": String("MIT/Apache-2.0"), "name": String("cfg-if"), "readme": String("README.md"), "repository": String("https://github.com/alexcrichton/cfg-if"), "version": String("0.1.2")})}
DEBUG:racer::cargo: find_src_via_lockfile package_name: cfg_if
DEBUG:racer::cargo: get_package_name found lock_table {"badges": Table({"travis-ci": Table({"repository": String("crossbeam-rs/crossbeam-deque")})}), "dependencies": Table({"crossbeam-epoch": Table({"version": String("0.4.0")}), "crossbeam-utils": Table({"version": String("0.2.1")})}), "dev-dependencies": Table({"rand": Table({"version": String("0.4")})}), "package": Table({"authors": Array([String("The Crossbeam Project Developers")]), "categories": Array([String("algorithms"), String("concurrency"), String("data-structures")]), "description": String("Concurrent work-stealing deque"), "documentation": String("https://docs.rs/crossbeam-deque"), "homepage": String("https://github.com/crossbeam-rs/crossbeam-deque"), "keywords": Array([String("chase-lev"), String("lock-free"), String("scheduler"), String("scheduling")]), "license": String("MIT/Apache-2.0"), "name": String("crossbeam-deque"), "readme": String("README.md"), "repository": String("https://github.com/crossbeam-rs/crossbeam-deque"), "version": String("0.3.0")})}
DEBUG:racer::cargo: find_src_via_lockfile package_name: crossbeam_deque
DEBUG:racer::cargo: get_package_name found lock_table {"dependencies": Table({"arrayvec": Table({"default-features": Boolean(false), "version": String("0.4")}), "cfg-if": Table({"version": String("0.1")}), "crossbeam-utils": Table({"default-features": Boolean(false), "version": String("0.3")}), "lazy_static": Table({"optional": Boolean(true), "version": String("1")}), "memoffset": Table({"version": String("0.2")}), "scopeguard": Table({"default-features": Boolean(false), "version": String("0.3")})}), "dev-dependencies": Table({"rand": Table({"version": String("0.4")})}), "features": Table({"default": Array([String("use_std")]), "nightly": Array([String("arrayvec/use_union")]), "sanitize": Array([]), "use_std": Array([String("lazy_static"), String("crossbeam-utils/use_std")])}), "package": Table({"authors": Array([String("The Crossbeam Project Developers")]), "categories": Array([String("concurrency"), String("memory-management")]), "description": String("Epoch-based garbage collection"), "documentation": String("https://docs.rs/crossbeam-epoch"), "homepage": String("https://github.com/crossbeam-rs/crossbeam-epoch"), "keywords": Array([String("lock-free"), String("rcu"), String("atomic"), String("garbage")]), "license": String("MIT/Apache-2.0"), "name": String("crossbeam-epoch"), "readme": String("README.md"), "repository": String("https://github.com/crossbeam-rs/crossbeam-epoch"), "version": String("0.4.1")})}
DEBUG:racer::cargo: find_src_via_lockfile package_name: crossbeam_epoch
DEBUG:racer::cargo: get_package_name found lock_table {"dependencies": Table({"cfg-if": Table({"version": String("0.1")})}), "features": Table({"default": Array([String("use_std")]), "nightly": Array([]), "use_std": Array([])}), "package": Table({"authors": Array([String("The Crossbeam Project Developers")]), "categories": Array([String("algorithms"), String("concurrency"), String("data-structures")]), "description": String("Utilities for concurrent programming"), "documentation": String("https://docs.rs/crossbeam-utils"), "homepage": String("https://github.com/crossbeam-rs/crossbeam-utils"), "keywords": Array([String("scoped"), String("thread"), String("atomic"), String("cache")]), "license": String("MIT/Apache-2.0"), "name": String("crossbeam-utils"), "readme": String("README.md"), "repository": String("https://github.com/crossbeam-rs/crossbeam-utils"), "version": String("0.2.2")})}
DEBUG:racer::cargo: find_src_via_lockfile package_name: crossbeam_utils
DEBUG:racer::cargo: get_package_name found lock_table {"dependencies": Table({"cfg-if": Table({"version": String("0.1")})}), "features": Table({"default": Array([String("use_std")]), "nightly": Array([]), "use_std": Array([])}), "package": Table({"authors": Array([String("The Crossbeam Project Developers")]), "categories": Array([String("algorithms"), String("concurrency"), String("data-structures")]), "description": String("Utilities for concurrent programming"), "documentation": String("https://docs.rs/crossbeam-utils"), "homepage": String("https://github.com/crossbeam-rs/crossbeam-utils"), "keywords": Array([String("scoped"), String("thread"), String("atomic"), String("cache")]), "license": String("MIT/Apache-2.0"), "name": String("crossbeam-utils"), "readme": String("README.md"), "repository": String("https://github.com/crossbeam-rs/crossbeam-utils"), "version": String("0.3.2")})}
DEBUG:racer::cargo: find_src_via_lockfile package_name: crossbeam_utils
DEBUG:racer::cargo: get_package_name found lock_table {"badges": Table({"appveyor": Table({"repository": String("rust-lang-nursery/futures-rs")}), "travis-ci": Table({"repository": String("rust-lang-nursery/futures-rs")})}), "dependencies": Table({}), "features": Table({"default": Array([String("use_std"), String("with-deprecated")]), "use_std": Array([]), "with-deprecated": Array([])}), "package": Table({"authors": Array([String("Alex Crichton <alex@alexcrichton.com>")]), "categories": Array([String("asynchronous")]), "description": String("An implementation of futures and streams featuring zero allocations,\ncomposability, and iterator-like interfaces.\n"), "documentation": String("https://docs.rs/futures"), "homepage": String("https://github.com/rust-lang-nursery/futures-rs"), "keywords": Array([String("futures"), String("async"), String("future")]), "license": String("MIT/Apache-2.0"), "name": String("futures"), "readme": String("README.md"), "repository": String("https://github.com/rust-lang-nursery/futures-rs"), "version": String("0.1.21")})}
DEBUG:racer::cargo: find_src_via_lockfile package_name: futures
DEBUG:racer::cargo: get_package_name found lock_table {"package": Table({"authors": Array([String("Carl Lerche <me@carllerche.com>")]), "categories": Array([String("network-programming"), String("api-bindings")]), "description": String("Portable buffer type for scatter/gather I/O operations\n"), "documentation": String("https://docs.rs/iovec"), "homepage": String("https://github.com/carllerche/iovec"), "keywords": Array([String("scatter"), String("gather"), String("vectored"), String("io"), String("networking")]), "license": String("MIT/Apache-2.0"), "name": String("iovec"), "readme": String("README.md"), "repository": String("https://github.com/carllerche/iovec"), "version": String("0.1.2")}), "target": Table({"cfg(unix)": Table({"dependencies": Table({"libc": Table({"version": String("0.2")})})}), "cfg(windows)": Table({"dependencies": Table({"winapi": Table({"version": String("0.2")})})})})}
DEBUG:racer::cargo: find_src_via_lockfile package_name: iovec
DEBUG:racer::cargo: get_package_name found lock_table {"build-dependencies": Table({"winapi-build": Table({"path": String("../../build"), "version": String("0.1.1")})}), "dependencies": Table({"winapi": Table({"path": String("../.."), "version": String("0.2.5")})}), "lib": Table({"name": String("kernel32")}), "package": Table({"authors": Array([String("Peter Atashian <retep998@gmail.com>")]), "build": String("build.rs"), "description": String("Contains function definitions for the Windows API library kernel32. See winapi for types and constants."), "documentation": String("https://retep998.github.io/doc/kernel32/"), "keywords": Array([String("windows"), String("ffi"), String("win32")]), "license": String("MIT"), "name": String("kernel32-sys"), "readme": String("README.md"), "repository": String("https://github.com/retep998/winapi-rs"), "version": String("0.2.2")})}
DEBUG:racer::cargo: find_src_via_lockfile package_name: kernel32
DEBUG:racer::cargo: get_package_name found lock_table {"badges": Table({"appveyor": Table({"repository": String("rust-lang-nursery/lazy-static.rs")}), "is-it-maintained-issue-resolution": Table({"repository": String("rust-lang-nursery/lazy-static.rs")}), "is-it-maintained-open-issues": Table({"repository": String("rust-lang-nursery/lazy-static.rs")}), "maintenance": Table({"status": String("passively-maintained")}), "travis-ci": Table({"repository": String("rust-lang-nursery/lazy-static.rs")})}), "dependencies": Table({"compiletest_rs": Table({"optional": Boolean(true), "version": String("0.3")}), "spin": Table({"optional": Boolean(true), "version": String("0.4.6")})}), "features": Table({"compiletest": Array([String("compiletest_rs")]), "nightly": Array([]), "spin_no_std": Array([String("nightly"), String("spin")])}), "package": Table({"authors": Array([String("Marvin Löbel <loebel.marvin@gmail.com>")]), "categories": Array([String("no-std"), String("rust-patterns"), String("memory-management")]), "description": String("A macro for declaring lazily evaluated statics in Rust."), "documentation": String("https://docs.rs/lazy_static"), "keywords": Array([String("macro"), String("lazy"), String("static")]), "license": String("MIT/Apache-2.0"), "name": String("lazy_static"), "readme": String("README.md"), "repository": String("https://github.com/rust-lang-nursery/lazy-static.rs"), "version": String("1.0.0")})}
DEBUG:racer::cargo: find_src_via_lockfile package_name: lazy_static
DEBUG:racer::cargo: get_package_name found lock_table {"dependencies": Table({"clippy": Table({"optional": Boolean(true), "version": String("0.0")})}), "features": Table({"nightly": Array([]), "nightly-testing": Array([String("clippy"), String("nightly")])}), "package": Table({"authors": Array([String("Alex Crichton <alex@alexcrichton.com>"), String("Nikita Pekin <contact@nikitapek.in>")]), "description": String("A library providing a lazily filled Cell struct"), "documentation": String("http://indiv0.github.io/lazycell/lazycell/"), "include": Array([String("CHANGELOG.md"), String("Cargo.toml"), String("LICENSE-MIT"), String("LICENSE-APACHE"), String("README.md"), String("src/**/*.rs")]), "keywords": Array([String("lazycell"), String("lazy"), String("cell"), String("library")]), "license": String("MIT/Apache-2.0"), "name": String("lazycell"), "readme": String("README.md"), "repository": String("https://github.com/indiv0/lazycell"), "version": String("0.6.0")})}
DEBUG:racer::cargo: find_src_via_lockfile package_name: lazycell
DEBUG:racer::cargo: get_package_name found lock_table {"badges": Table({"appveyor": Table({"project_name": String("rust-lang-libs/libc"), "repository": String("rust-lang/libc")}), "travis-ci": Table({"repository": String("rust-lang/libc")})}), "features": Table({"default": Array([String("use_std")]), "use_std": Array([])}), "package": Table({"authors": Array([String("The Rust Project Developers")]), "description": String("A library for types and bindings to native C functions often found in libc or\nother common platform libraries.\n"), "documentation": String("http://doc.rust-lang.org/libc"), "homepage": String("https://github.com/rust-lang/libc"), "license": String("MIT/Apache-2.0"), "name": String("libc"), "readme": String("README.md"), "repository": String("https://github.com/rust-lang/libc"), "version": String("0.2.40")})}
DEBUG:racer::cargo: find_src_via_lockfile package_name: libc
DEBUG:racer::cargo: get_package_name found lock_table {"badges": Table({"appveyor": Table({"repository": String("alexcrichton/log")}), "travis-ci": Table({"repository": String("rust-lang-nursery/log")})}), "dependencies": Table({"cfg-if": Table({"version": String("0.1.2")}), "serde": Table({"default-features": Boolean(false), "optional": Boolean(true), "version": String("1.0")})}), "dev-dependencies": Table({"serde_test": Table({"version": String("1.0")})}), "features": Table({"max_level_debug": Array([]), "max_level_error": Array([]), "max_level_info": Array([]), "max_level_off": Array([]), "max_level_trace": Array([]), "max_level_warn": Array([]), "release_max_level_debug": Array([]), "release_max_level_error": Array([]), "release_max_level_info": Array([]), "release_max_level_off": Array([]), "release_max_level_trace": Array([]), "release_max_level_warn": Array([]), "std": Array([])}), "package": Table({"authors": Array([String("The Rust Project Developers")]), "categories": Array([String("development-tools::debugging")]), "description": String("A lightweight logging facade for Rust\n"), "documentation": String("https://docs.rs/log"), "homepage": String("https://github.com/rust-lang/log"), "keywords": Array([String("logging")]), "license": String("MIT/Apache-2.0"), "metadata": Table({"docs": Table({"rs": Table({"features": Array([String("std"), String("serde")])})})}), "name": String("log"), "readme": String("README.md"), "repository": String("https://github.com/rust-lang/log"), "version": String("0.4.1")}), "test": Array([Table({"harness": Boolean(false), "name": String("filters")})])}
DEBUG:racer::cargo: find_src_via_lockfile package_name: log
DEBUG:racer::cargo: get_package_name found lock_table {"dependencies": Table({}), "package": Table({"authors": Array([String("Gilad Naaman <gilad.naaman@gmail.com>")]), "categories": Array([String("no-std")]), "description": String("offset_of functionality for Rust structs."), "keywords": Array([String("mem"), String("offset"), String("offset_of"), String("offsetof")]), "license": String("MIT"), "name": String("memoffset"), "readme": String("README.md"), "repository": String("https://github.com/Gilnaa/memoffset"), "version": String("0.2.1")})}
DEBUG:racer::cargo: find_src_via_lockfile package_name: memoffset
DEBUG:racer::cargo: get_package_name found lock_table {"dependencies": Table({"iovec": Table({"version": String("0.1.1")}), "lazycell": Table({"version": String("0.6.0")}), "log": Table({"version": String("0.4")}), "net2": Table({"version": String("0.2.29")}), "slab": Table({"version": String("0.4.0")})}), "dev-dependencies": Table({"bytes": Table({"version": String("0.3.0")}), "env_logger": Table({"default-features": Boolean(false), "version": String("0.4.0")}), "tempdir": Table({"version": String("0.3.4")})}), "features": Table({"default": Array([String("with-deprecated")]), "with-deprecated": Array([])}), "package": Table({"authors": Array([String("Carl Lerche <me@carllerche.com>")]), "categories": Array([String("asynchronous")]), "description": String("Lightweight non-blocking IO"), "documentation": String("https://docs.rs/mio"), "exclude": Array([String(".gitignore"), String(".travis.yml"), String("deploy.sh")]), "homepage": String("https://github.com/carllerche/mio"), "keywords": Array([String("io"), String("async"), String("non-blocking")]), "license": String("MIT"), "name": String("mio"), "readme": String("README.md"), "repository": String("https://github.com/carllerche/mio"), "version": String("0.6.14")}), "target": Table({"cfg(target_os = \"fuchsia\")": Table({"dependencies": Table({"fuchsia-zircon": Table({"version": String("0.3.2")}), "fuchsia-zircon-sys": Table({"version": String("0.3.2")})})}), "cfg(unix)": Table({"dependencies": Table({"libc": Table({"version": String("0.2.19")})})}), "cfg(windows)": Table({"dependencies": Table({"kernel32-sys": Table({"version": String("0.2")}), "miow": Table({"version": String("0.2.1")}), "winapi": Table({"version": String("0.2.1")})})})}), "test": Array([Table({"name": String("test"), "path": String("test/mod.rs")})])}
DEBUG:racer::cargo: find_src_via_lockfile package_name: mio
DEBUG:racer::cargo: get_package_name found lock_table {"dependencies": Table({"cfg-if": Table({"version": String("0.1")})}), "features": Table({"default": Array([String("duration")]), "duration": Array([]), "nightly": Array([])}), "package": Table({"authors": Array([String("Alex Crichton <alex@alexcrichton.com>")]), "description": String("Extensions to the standard library\'s networking types as proposed in RFC 1158.\n"), "documentation": String("https://doc.rust-lang.org/net2-rs/"), "homepage": String("https://github.com/rust-lang-nursery/net2-rs"), "license": String("MIT/Apache-2.0"), "name": String("net2"), "readme": String("README.md"), "repository": String("https://github.com/rust-lang-nursery/net2-rs"), "version": String("0.2.32")}), "target": Table({"cfg(unix)": Table({"dependencies": Table({"libc": Table({"version": String("0.2.37")})})}), "cfg(windows)": Table({"dependencies": Table({"winapi": Table({"features": Array([String("handleapi"), String("winsock2"), String("ws2def"), String("ws2ipdef"), String("ws2tcpip")]), "version": String("0.3")})})}), "i686-apple-darwin": Table({"dependencies": Table({"libc": Table({"version": String("0.2.37")})})}), "i686-unknown-linux-gnu": Table({"dependencies": Table({"libc": Table({"version": String("0.2.37")})})}), "x86_64-apple-darwin": Table({"dependencies": Table({"libc": Table({"version": String("0.2.37")})})}), "x86_64-unknown-linux-gnu": Table({"dependencies": Table({"libc": Table({"version": String("0.2.37")})})})})}
DEBUG:racer::cargo: find_src_via_lockfile package_name: net2
DEBUG:racer::cargo: get_package_name found lock_table {"dependencies": Table({"nodrop-union": Table({"optional": Boolean(true), "version": String("0.1.8")})}), "features": Table({"default": Array([String("std")]), "std": Array([]), "use_needs_drop": Array([]), "use_union": Array([String("nodrop-union")])}), "package": Table({"authors": Array([String("bluss")]), "categories": Array([String("rust-patterns")]), "description": String("A wrapper type to inhibit drop (destructor). Use std::mem::ManuallyDrop instead!"), "documentation": String("https://docs.rs/nodrop/"), "keywords": Array([String("container"), String("drop"), String("no_std")]), "license": String("MIT/Apache-2.0"), "metadata": Table({"release": Table({"no-dev-version": Boolean(true)})}), "name": String("nodrop"), "repository": String("https://github.com/bluss/arrayvec"), "version": String("0.1.12")})}
DEBUG:racer::cargo: find_src_via_lockfile package_name: nodrop
DEBUG:racer::cargo: get_package_name found lock_table {"dependencies": Table({"libc": Table({"version": String("0.2.26")})}), "package": Table({"authors": Array([String("Sean McArthur <sean@seanmonstar.com>")]), "categories": Array([String("hardware-support")]), "description": String("Get the number of CPUs on a machine."), "documentation": String("https://docs.rs/num_cpus"), "keywords": Array([String("cpu"), String("cpus"), String("cores")]), "license": String("MIT/Apache-2.0"), "name": String("num_cpus"), "readme": String("README.md"), "repository": String("https://github.com/seanmonstar/num_cpus"), "version": String("1.8.0")})}
DEBUG:racer::cargo: find_src_via_lockfile package_name: num_cpus
DEBUG:racer::cargo: get_package_name found lock_table {"features": Table({"alloc": Array([]), "default": Array([String("std")]), "i128_support": Array([]), "nightly": Array([String("i128_support")]), "std": Array([String("libc")])}), "package": Table({"authors": Array([String("The Rust Project Developers")]), "categories": Array([String("algorithms")]), "description": String("Random number generators and other randomness functionality.\n"), "documentation": String("https://docs.rs/rand"), "homepage": String("https://github.com/rust-lang-nursery/rand"), "keywords": Array([String("random"), String("rng")]), "license": String("MIT/Apache-2.0"), "name": String("rand"), "readme": String("README.md"), "repository": String("https://github.com/rust-lang-nursery/rand"), "version": String("0.4.2")}), "target": Table({"cfg(target_os = \"fuchsia\")": Table({"dependencies": Table({"fuchsia-zircon": Table({"version": String("0.3.2")})})}), "cfg(unix)": Table({"dependencies": Table({"libc": Table({"optional": Boolean(true), "version": String("0.2")})})}), "cfg(windows)": Table({"dependencies": Table({"winapi": Table({"features": Array([String("minwindef"), String("ntsecapi"), String("profileapi"), String("winnt")]), "version": String("0.3")})})})})}
DEBUG:racer::cargo: find_src_via_lockfile package_name: rand
DEBUG:racer::cargo: get_package_name found lock_table {"features": Table({"default": Array([String("use_std")]), "use_std": Array([])}), "package": Table({"authors": Array([String("bluss")]), "categories": Array([String("rust-patterns")]), "description": String("A RAII scope guard that will run a given closure when it goes out of scope,\neven if the code between panics (assuming unwinding panic).\n\nDefines the macros `defer!` and `defer_on_unwind!`; the latter only runs\nif the scope is extited through unwinding on panic.\n"), "documentation": String("https://docs.rs/scopeguard/"), "keywords": Array([String("scope-guard"), String("defer"), String("panic")]), "license": String("MIT/Apache-2.0"), "metadata": Table({"release": Table({"no-dev-version": Boolean(true)})}), "name": String("scopeguard"), "repository": String("https://github.com/bluss/scopeguard"), "version": String("0.3.3")})}
DEBUG:racer::cargo: find_src_via_lockfile package_name: scopeguard
DEBUG:racer::cargo: get_package_name found lock_table {"package": Table({"authors": Array([String("Carl Lerche <me@carllerche.com>")]), "categories": Array([String("memory-management"), String("data-structures")]), "description": String("Pre-allocated storage for a uniform data type"), "documentation": String("https://docs.rs/slab"), "homepage": String("https://github.com/carllerche/slab"), "keywords": Array([String("slab"), String("allocator")]), "license": String("MIT"), "name": String("slab"), "readme": String("README.md"), "repository": String("https://github.com/carllerche/slab"), "version": String("0.4.0")})}
DEBUG:racer::cargo: find_src_via_lockfile package_name: slab
DEBUG:racer::cargo: get_package_name found lock_table {"badges": Table({"appveyor": Table({"repository": String("carllerche/tokio")}), "travis-ci": Table({"repository": String("tokio-rs/tokio")})}), "dependencies": Table({"futures": Table({"version": String("0.1.20")}), "futures2": Table({"optional": Boolean(true), "version": String("0.1.0")}), "mio": Table({"version": String("0.6.14")}), "tokio-executor": Table({"version": String("0.1.2")}), "tokio-io": Table({"version": String("0.1.6")}), "tokio-reactor": Table({"version": String("0.1.1")}), "tokio-tcp": Table({"version": String("0.1.0")}), "tokio-threadpool": Table({"version": String("0.1.2")}), "tokio-timer": Table({"version": String("0.2.0")}), "tokio-udp": Table({"version": String("0.1.0")})}), "dev-dependencies": Table({"bytes": Table({"version": String("0.4")}), "env_logger": Table({"default-features": Boolean(false), "version": String("0.4")}), "flate2": Table({"features": Array([String("tokio")]), "version": String("1")}), "futures-cpupool": Table({"version": String("0.1")}), "http": Table({"version": String("0.1")}), "httparse": Table({"version": String("1.0")}), "libc": Table({"version": String("0.2")}), "num_cpus": Table({"version": String("1.0")}), "serde": Table({"version": String("1.0")}), "serde_derive": Table({"version": String("1.0")}), "serde_json": Table({"version": String("1.0")}), "time": Table({"version": String("0.1")})}), "features": Table({"default": Array([]), "unstable-futures": Array([String("futures2"), String("tokio-reactor/unstable-futures"), String("tokio-threadpool/unstable-futures"), String("tokio-executor/unstable-futures"), String("tokio-tcp/unstable-futures"), String("tokio-udp/unstable-futures")])}), "package": Table({"authors": Array([String("Carl Lerche <me@carllerche.com>")]), "categories": Array([String("asynchronous"), String("network-programming")]), "description": String("An event-driven, non-blocking I/O platform for writing asynchronous I/O\nbacked applications.\n"), "documentation": String("https://docs.rs/tokio/0.1"), "homepage": String("https://tokio.rs"), "keywords": Array([String("io"), String("async"), String("non-blocking"), String("futures")]), "license": String("MIT"), "name": String("tokio"), "readme": String("README.md"), "repository": String("https://github.com/tokio-rs/tokio"), "version": String("0.1.5")})}
DEBUG:racer::cargo: find_src_via_lockfile package_name: tokio
DEBUG:racer::nameres: get_crate_file  - found the crate file! "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs"
DEBUG:racer::nameres: searching a module 'tokio' for net (whole path: P[tokio::net])
DEBUG:racer::nameres: searching scope Type start: 0 point: 0 'net' "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs" ExactMatch local: false, session: Session { .. }
DEBUG:racer::matchers: found a module declaration: |pub mod net;|
DEBUG:racer::nameres: resolve_path returning [Match ["net", "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/net.rs", 0, false, Module, [], [] |/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/net.rs|]]
DEBUG:racer::nameres: searching a module 'net' for  (whole path: P[tokio::net::])
DEBUG:racer::nameres: searching scope Both start: 0 point: 0 '' "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/net.rs" StartsWith local: false, session: Session { .. }
DEBUG:racer::matchers: found use:  in |pub use tokio_tcp::{TcpStream, ConnectFuture};|
DEBUG:syntex_syntax::parse::lexer: scanning whitespace: Some(TokenAndSpan { tok: Whitespace, sp: Span { lo: BytePos(3), hi: BytePos(4), expn_id: ExpnId(4294967295) } })
DEBUG:syntex_syntax::codemap: byte pos BytePos(0) is on the line at byte pos BytePos(0)
DEBUG:syntex_syntax::codemap: char pos CharPos(0) is on the line at char pos CharPos(0)
DEBUG:syntex_syntax::codemap: byte is on line: 1
DEBUG:syntex_syntax::parse::attr: parse_outer_attributes: self.token=Ident(pub#0)
DEBUG:syntex_syntax::parse::lexer: scanning whitespace: Some(TokenAndSpan { tok: Whitespace, sp: Span { lo: BytePos(7), hi: BytePos(8), expn_id: ExpnId(4294967295) } })
DEBUG:syntex_syntax::parse::lexer: scanning whitespace: Some(TokenAndSpan { tok: Whitespace, sp: Span { lo: BytePos(30), hi: BytePos(31), expn_id: ExpnId(4294967295) } })
DEBUG:syntex_syntax::parse::attr: parse_outer_attributes: self.token=Eof
DEBUG:racer::nameres: resolve_path P[tokio_tcp::TcpStream] "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/net.rs" 1497 ExactMatch
DEBUG:racer::nameres: resolve_path P[tokio_tcp] "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/net.rs" 1497 ExactMatch
DEBUG:racer::nameres: resolve_name tokio_tcp "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/net.rs" 1497 ExactMatch Type
DEBUG:racer::nameres: search_local_scopes PathSegment { name: "tokio_tcp", types: [] } "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/net.rs" 1497 ExactMatch Type
DEBUG:racer::nameres: searching scope Type start: 0 point: 1497 'tokio_tcp' "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/net.rs" ExactMatch local: true, session: Session { .. }
DEBUG:racer::matchers: import pub use tokio_tcp::{TcpStream, ConnectFuture}; involved in a cycle; ignoring
DEBUG:racer::matchers: found use: tokio_tcp in |pub use tokio_tcp::{TcpListener, Incoming};|
DEBUG:syntex_syntax::parse::lexer: scanning whitespace: Some(TokenAndSpan { tok: Whitespace, sp: Span { lo: BytePos(3), hi: BytePos(4), expn_id: ExpnId(4294967295) } })
DEBUG:syntex_syntax::codemap: byte pos BytePos(0) is on the line at byte pos BytePos(0)
DEBUG:syntex_syntax::codemap: char pos CharPos(0) is on the line at char pos CharPos(0)
DEBUG:syntex_syntax::codemap: byte is on line: 1
DEBUG:syntex_syntax::parse::attr: parse_outer_attributes: self.token=Ident(pub#0)
DEBUG:syntex_syntax::parse::lexer: scanning whitespace: Some(TokenAndSpan { tok: Whitespace, sp: Span { lo: BytePos(7), hi: BytePos(8), expn_id: ExpnId(4294967295) } })
DEBUG:syntex_syntax::parse::lexer: scanning whitespace: Some(TokenAndSpan { tok: Whitespace, sp: Span { lo: BytePos(32), hi: BytePos(33), expn_id: ExpnId(4294967295) } })
DEBUG:syntex_syntax::parse::attr: parse_outer_attributes: self.token=Eof
DEBUG:racer::nameres: search_scope found matches ExactMatch []
DEBUG:racer::nameres: search_crate_root |PathSegment { name: "tokio_tcp", types: [] }| "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/net.rs"
DEBUG:racer::nameres: going to search for PathSegment { name: "tokio_tcp", types: [] } in crateroot "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs"
DEBUG:racer::nameres: resolve_name tokio_tcp "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs" 0 ExactMatch Type
DEBUG:racer::nameres: search_local_scopes PathSegment { name: "tokio_tcp", types: [] } "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs" 0 ExactMatch Type
DEBUG:racer::nameres: searching scope Type start: 0 point: 0 'tokio_tcp' "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs" ExactMatch local: true, session: Session { .. }
DEBUG:racer::matchers: found an extern crate: |extern crate tokio_tcp;|
DEBUG:syntex_syntax::parse::lexer: scanning whitespace: Some(TokenAndSpan { tok: Whitespace, sp: Span { lo: BytePos(6), hi: BytePos(7), expn_id: ExpnId(4294967295) } })
DEBUG:syntex_syntax::codemap: byte pos BytePos(0) is on the line at byte pos BytePos(0)
DEBUG:syntex_syntax::codemap: char pos CharPos(0) is on the line at char pos CharPos(0)
DEBUG:syntex_syntax::codemap: byte is on line: 1
DEBUG:syntex_syntax::parse::attr: parse_outer_attributes: self.token=Ident(extern#0)
DEBUG:syntex_syntax::parse::lexer: scanning whitespace: Some(TokenAndSpan { tok: Whitespace, sp: Span { lo: BytePos(12), hi: BytePos(13), expn_id: ExpnId(4294967295) } })
DEBUG:racer::matchers: extern crate tokio_tcp
DEBUG:racer::nameres: get_crate_file tokio_tcp, "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs"
DEBUG:racer::cargo: get_crate_file: from_path="/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs"
DEBUG:racer::cargo: get_local_packages found table {"badges": Table({"appveyor": Table({"repository": String("carllerche/tokio")}), "travis-ci": Table({"repository": String("tokio-rs/tokio")})}), "dependencies": Table({"futures": Table({"version": String("0.1.20")}), "futures2": Table({"optional": Boolean(true), "version": String("0.1.0")}), "mio": Table({"version": String("0.6.14")}), "tokio-executor": Table({"version": String("0.1.2")}), "tokio-io": Table({"version": String("0.1.6")}), "tokio-reactor": Table({"version": String("0.1.1")}), "tokio-tcp": Table({"version": String("0.1.0")}), "tokio-threadpool": Table({"version": String("0.1.2")}), "tokio-timer": Table({"version": String("0.2.0")}), "tokio-udp": Table({"version": String("0.1.0")})}), "dev-dependencies": Table({"bytes": Table({"version": String("0.4")}), "env_logger": Table({"default-features": Boolean(false), "version": String("0.4")}), "flate2": Table({"features": Array([String("tokio")]), "version": String("1")}), "futures-cpupool": Table({"version": String("0.1")}), "http": Table({"version": String("0.1")}), "httparse": Table({"version": String("1.0")}), "libc": Table({"version": String("0.2")}), "num_cpus": Table({"version": String("1.0")}), "serde": Table({"version": String("1.0")}), "serde_derive": Table({"version": String("1.0")}), "serde_json": Table({"version": String("1.0")}), "time": Table({"version": String("0.1")})}), "features": Table({"default": Array([]), "unstable-futures": Array([String("futures2"), String("tokio-reactor/unstable-futures"), String("tokio-threadpool/unstable-futures"), String("tokio-executor/unstable-futures"), String("tokio-tcp/unstable-futures"), String("tokio-udp/unstable-futures")])}), "package": Table({"authors": Array([String("Carl Lerche <me@carllerche.com>")]), "categories": Array([String("asynchronous"), String("network-programming")]), "description": String("An event-driven, non-blocking I/O platform for writing asynchronous I/O\nbacked applications.\n"), "documentation": String("https://docs.rs/tokio/0.1"), "homepage": String("https://tokio.rs"), "keywords": Array([String("io"), String("async"), String("non-blocking"), String("futures")]), "license": String("MIT"), "name": String("tokio"), "readme": String("README.md"), "repository": String("https://github.com/tokio-rs/tokio"), "version": String("0.1.5")})};getting packages for section 'dependencies'
DEBUG:racer::cargo: get_local_packages found table {"badges": Table({"appveyor": Table({"repository": String("carllerche/tokio")}), "travis-ci": Table({"repository": String("tokio-rs/tokio")})}), "dependencies": Table({"futures": Table({"version": String("0.1.20")}), "futures2": Table({"optional": Boolean(true), "version": String("0.1.0")}), "mio": Table({"version": String("0.6.14")}), "tokio-executor": Table({"version": String("0.1.2")}), "tokio-io": Table({"version": String("0.1.6")}), "tokio-reactor": Table({"version": String("0.1.1")}), "tokio-tcp": Table({"version": String("0.1.0")}), "tokio-threadpool": Table({"version": String("0.1.2")}), "tokio-timer": Table({"version": String("0.2.0")}), "tokio-udp": Table({"version": String("0.1.0")})}), "dev-dependencies": Table({"bytes": Table({"version": String("0.4")}), "env_logger": Table({"default-features": Boolean(false), "version": String("0.4")}), "flate2": Table({"features": Array([String("tokio")]), "version": String("1")}), "futures-cpupool": Table({"version": String("0.1")}), "http": Table({"version": String("0.1")}), "httparse": Table({"version": String("1.0")}), "libc": Table({"version": String("0.2")}), "num_cpus": Table({"version": String("1.0")}), "serde": Table({"version": String("1.0")}), "serde_derive": Table({"version": String("1.0")}), "serde_json": Table({"version": String("1.0")}), "time": Table({"version": String("0.1")})}), "features": Table({"default": Array([]), "unstable-futures": Array([String("futures2"), String("tokio-reactor/unstable-futures"), String("tokio-threadpool/unstable-futures"), String("tokio-executor/unstable-futures"), String("tokio-tcp/unstable-futures"), String("tokio-udp/unstable-futures")])}), "package": Table({"authors": Array([String("Carl Lerche <me@carllerche.com>")]), "categories": Array([String("asynchronous"), String("network-programming")]), "description": String("An event-driven, non-blocking I/O platform for writing asynchronous I/O\nbacked applications.\n"), "documentation": String("https://docs.rs/tokio/0.1"), "homepage": String("https://tokio.rs"), "keywords": Array([String("io"), String("async"), String("non-blocking"), String("futures")]), "license": String("MIT"), "name": String("tokio"), "readme": String("README.md"), "repository": String("https://github.com/tokio-rs/tokio"), "version": String("0.1.5")})};getting packages for section 'dev-dependencies'
DEBUG:racer::util: Getting rust source path. Trying env var RUST_SRC_PATH.
DEBUG:racer::util: Nope. Trying rustc --sysroot and appending lib/rustlib/src/rust/src to that.
DEBUG:racer::nameres: search_closure_args found valid closure arg scope: |e|
DEBUG:racer::nameres: search_scope found matches ExactMatch []
DEBUG:racer::nameres: search_crate_root |PathSegment { name: "tokio_tcp", types: [] }| "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs"
DEBUG:racer::nameres: search_prelude file PathSegment { name: "tokio_tcp", types: [] } ExactMatch Type
DEBUG:racer::nameres: searching scope Type start: 0 point: 0 'tokio_tcp' "/Users/zhaoyao/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/src/libstd/prelude/v1.rs" ExactMatch local: true, session: Session { .. }
DEBUG:racer::nameres: search_scope found matches ExactMatch []
DEBUG:racer::nameres: search_prelude file PathSegment { name: "tokio_tcp", types: [] } ExactMatch Type
DEBUG:racer::nameres: searching scope Type start: 0 point: 0 'tokio_tcp' "/Users/zhaoyao/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/src/libstd/prelude/v1.rs" ExactMatch local: true, session: Session { .. }
DEBUG:racer::nameres: search_scope found matches ExactMatch []
DEBUG:racer::nameres: resolve_path returning []
DEBUG:racer::nameres: resolve_path P[tokio_tcp::ConnectFuture] "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/net.rs" 1497 ExactMatch
DEBUG:racer::nameres: resolve_path P[tokio_tcp] "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/net.rs" 1497 ExactMatch
DEBUG:racer::nameres: resolve_name tokio_tcp "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/net.rs" 1497 ExactMatch Type
DEBUG:racer::nameres: search_local_scopes PathSegment { name: "tokio_tcp", types: [] } "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/net.rs" 1497 ExactMatch Type
DEBUG:racer::nameres: searching scope Type start: 0 point: 1497 'tokio_tcp' "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/net.rs" ExactMatch local: true, session: Session { .. }
DEBUG:racer::matchers: import pub use tokio_tcp::{TcpStream, ConnectFuture}; involved in a cycle; ignoring
DEBUG:racer::matchers: found use: tokio_tcp in |pub use tokio_tcp::{TcpListener, Incoming};|
DEBUG:syntex_syntax::parse::lexer: scanning whitespace: Some(TokenAndSpan { tok: Whitespace, sp: Span { lo: BytePos(3), hi: BytePos(4), expn_id: ExpnId(4294967295) } })
DEBUG:syntex_syntax::codemap: byte pos BytePos(0) is on the line at byte pos BytePos(0)
DEBUG:syntex_syntax::codemap: char pos CharPos(0) is on the line at char pos CharPos(0)
DEBUG:syntex_syntax::codemap: byte is on line: 1
DEBUG:syntex_syntax::parse::attr: parse_outer_attributes: self.token=Ident(pub#0)
DEBUG:syntex_syntax::parse::lexer: scanning whitespace: Some(TokenAndSpan { tok: Whitespace, sp: Span { lo: BytePos(7), hi: BytePos(8), expn_id: ExpnId(4294967295) } })
DEBUG:syntex_syntax::parse::lexer: scanning whitespace: Some(TokenAndSpan { tok: Whitespace, sp: Span { lo: BytePos(32), hi: BytePos(33), expn_id: ExpnId(4294967295) } })
DEBUG:syntex_syntax::parse::attr: parse_outer_attributes: self.token=Eof
DEBUG:racer::nameres: search_scope found matches ExactMatch []
DEBUG:racer::nameres: search_crate_root |PathSegment { name: "tokio_tcp", types: [] }| "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/net.rs"
DEBUG:racer::nameres: going to search for PathSegment { name: "tokio_tcp", types: [] } in crateroot "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs"
DEBUG:racer::nameres: resolve_name tokio_tcp "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs" 0 ExactMatch Type
DEBUG:racer::nameres: search_local_scopes PathSegment { name: "tokio_tcp", types: [] } "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs" 0 ExactMatch Type
DEBUG:racer::nameres: searching scope Type start: 0 point: 0 'tokio_tcp' "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs" ExactMatch local: true, session: Session { .. }
DEBUG:racer::matchers: found an extern crate: |extern crate tokio_tcp;|
DEBUG:syntex_syntax::parse::lexer: scanning whitespace: Some(TokenAndSpan { tok: Whitespace, sp: Span { lo: BytePos(6), hi: BytePos(7), expn_id: ExpnId(4294967295) } })
DEBUG:syntex_syntax::codemap: byte pos BytePos(0) is on the line at byte pos BytePos(0)
DEBUG:syntex_syntax::codemap: char pos CharPos(0) is on the line at char pos CharPos(0)
DEBUG:syntex_syntax::codemap: byte is on line: 1
DEBUG:syntex_syntax::parse::attr: parse_outer_attributes: self.token=Ident(extern#0)
DEBUG:syntex_syntax::parse::lexer: scanning whitespace: Some(TokenAndSpan { tok: Whitespace, sp: Span { lo: BytePos(12), hi: BytePos(13), expn_id: ExpnId(4294967295) } })
DEBUG:racer::matchers: extern crate tokio_tcp
DEBUG:racer::nameres: get_crate_file tokio_tcp, "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs"
DEBUG:racer::cargo: get_crate_file: from_path="/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs"
DEBUG:racer::cargo: get_local_packages found table {"badges": Table({"appveyor": Table({"repository": String("carllerche/tokio")}), "travis-ci": Table({"repository": String("tokio-rs/tokio")})}), "dependencies": Table({"futures": Table({"version": String("0.1.20")}), "futures2": Table({"optional": Boolean(true), "version": String("0.1.0")}), "mio": Table({"version": String("0.6.14")}), "tokio-executor": Table({"version": String("0.1.2")}), "tokio-io": Table({"version": String("0.1.6")}), "tokio-reactor": Table({"version": String("0.1.1")}), "tokio-tcp": Table({"version": String("0.1.0")}), "tokio-threadpool": Table({"version": String("0.1.2")}), "tokio-timer": Table({"version": String("0.2.0")}), "tokio-udp": Table({"version": String("0.1.0")})}), "dev-dependencies": Table({"bytes": Table({"version": String("0.4")}), "env_logger": Table({"default-features": Boolean(false), "version": String("0.4")}), "flate2": Table({"features": Array([String("tokio")]), "version": String("1")}), "futures-cpupool": Table({"version": String("0.1")}), "http": Table({"version": String("0.1")}), "httparse": Table({"version": String("1.0")}), "libc": Table({"version": String("0.2")}), "num_cpus": Table({"version": String("1.0")}), "serde": Table({"version": String("1.0")}), "serde_derive": Table({"version": String("1.0")}), "serde_json": Table({"version": String("1.0")}), "time": Table({"version": String("0.1")})}), "features": Table({"default": Array([]), "unstable-futures": Array([String("futures2"), String("tokio-reactor/unstable-futures"), String("tokio-threadpool/unstable-futures"), String("tokio-executor/unstable-futures"), String("tokio-tcp/unstable-futures"), String("tokio-udp/unstable-futures")])}), "package": Table({"authors": Array([String("Carl Lerche <me@carllerche.com>")]), "categories": Array([String("asynchronous"), String("network-programming")]), "description": String("An event-driven, non-blocking I/O platform for writing asynchronous I/O\nbacked applications.\n"), "documentation": String("https://docs.rs/tokio/0.1"), "homepage": String("https://tokio.rs"), "keywords": Array([String("io"), String("async"), String("non-blocking"), String("futures")]), "license": String("MIT"), "name": String("tokio"), "readme": String("README.md"), "repository": String("https://github.com/tokio-rs/tokio"), "version": String("0.1.5")})};getting packages for section 'dependencies'
DEBUG:racer::cargo: get_local_packages found table {"badges": Table({"appveyor": Table({"repository": String("carllerche/tokio")}), "travis-ci": Table({"repository": String("tokio-rs/tokio")})}), "dependencies": Table({"futures": Table({"version": String("0.1.20")}), "futures2": Table({"optional": Boolean(true), "version": String("0.1.0")}), "mio": Table({"version": String("0.6.14")}), "tokio-executor": Table({"version": String("0.1.2")}), "tokio-io": Table({"version": String("0.1.6")}), "tokio-reactor": Table({"version": String("0.1.1")}), "tokio-tcp": Table({"version": String("0.1.0")}), "tokio-threadpool": Table({"version": String("0.1.2")}), "tokio-timer": Table({"version": String("0.2.0")}), "tokio-udp": Table({"version": String("0.1.0")})}), "dev-dependencies": Table({"bytes": Table({"version": String("0.4")}), "env_logger": Table({"default-features": Boolean(false), "version": String("0.4")}), "flate2": Table({"features": Array([String("tokio")]), "version": String("1")}), "futures-cpupool": Table({"version": String("0.1")}), "http": Table({"version": String("0.1")}), "httparse": Table({"version": String("1.0")}), "libc": Table({"version": String("0.2")}), "num_cpus": Table({"version": String("1.0")}), "serde": Table({"version": String("1.0")}), "serde_derive": Table({"version": String("1.0")}), "serde_json": Table({"version": String("1.0")}), "time": Table({"version": String("0.1")})}), "features": Table({"default": Array([]), "unstable-futures": Array([String("futures2"), String("tokio-reactor/unstable-futures"), String("tokio-threadpool/unstable-futures"), String("tokio-executor/unstable-futures"), String("tokio-tcp/unstable-futures"), String("tokio-udp/unstable-futures")])}), "package": Table({"authors": Array([String("Carl Lerche <me@carllerche.com>")]), "categories": Array([String("asynchronous"), String("network-programming")]), "description": String("An event-driven, non-blocking I/O platform for writing asynchronous I/O\nbacked applications.\n"), "documentation": String("https://docs.rs/tokio/0.1"), "homepage": String("https://tokio.rs"), "keywords": Array([String("io"), String("async"), String("non-blocking"), String("futures")]), "license": String("MIT"), "name": String("tokio"), "readme": String("README.md"), "repository": String("https://github.com/tokio-rs/tokio"), "version": String("0.1.5")})};getting packages for section 'dev-dependencies'
DEBUG:racer::nameres: search_closure_args found valid closure arg scope: |e|
DEBUG:racer::nameres: search_scope found matches ExactMatch []
DEBUG:racer::nameres: search_crate_root |PathSegment { name: "tokio_tcp", types: [] }| "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs"
DEBUG:racer::nameres: search_prelude file PathSegment { name: "tokio_tcp", types: [] } ExactMatch Type
DEBUG:racer::nameres: searching scope Type start: 0 point: 0 'tokio_tcp' "/Users/zhaoyao/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/src/libstd/prelude/v1.rs" ExactMatch local: true, session: Session { .. }
DEBUG:racer::nameres: search_scope found matches ExactMatch []
DEBUG:racer::nameres: search_prelude file PathSegment { name: "tokio_tcp", types: [] } ExactMatch Type
DEBUG:racer::nameres: searching scope Type start: 0 point: 0 'tokio_tcp' "/Users/zhaoyao/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/src/libstd/prelude/v1.rs" ExactMatch local: true, session: Session { .. }
DEBUG:racer::nameres: search_scope found matches ExactMatch []
DEBUG:racer::nameres: resolve_path returning []
DEBUG:racer::matchers: found use:  in |pub use tokio_tcp::{TcpListener, Incoming};|
DEBUG:syntex_syntax::parse::lexer: scanning whitespace: Some(TokenAndSpan { tok: Whitespace, sp: Span { lo: BytePos(3), hi: BytePos(4), expn_id: ExpnId(4294967295) } })
DEBUG:syntex_syntax::codemap: byte pos BytePos(0) is on the line at byte pos BytePos(0)
DEBUG:syntex_syntax::codemap: char pos CharPos(0) is on the line at char pos CharPos(0)
DEBUG:syntex_syntax::codemap: byte is on line: 1
DEBUG:syntex_syntax::parse::attr: parse_outer_attributes: self.token=Ident(pub#0)
DEBUG:syntex_syntax::parse::lexer: scanning whitespace: Some(TokenAndSpan { tok: Whitespace, sp: Span { lo: BytePos(7), hi: BytePos(8), expn_id: ExpnId(4294967295) } })
DEBUG:syntex_syntax::parse::lexer: scanning whitespace: Some(TokenAndSpan { tok: Whitespace, sp: Span { lo: BytePos(32), hi: BytePos(33), expn_id: ExpnId(4294967295) } })
DEBUG:syntex_syntax::parse::attr: parse_outer_attributes: self.token=Eof
DEBUG:racer::nameres: resolve_path P[tokio_tcp::TcpListener] "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/net.rs" 1544 ExactMatch
DEBUG:racer::nameres: resolve_path P[tokio_tcp] "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/net.rs" 1544 ExactMatch
DEBUG:racer::nameres: resolve_name tokio_tcp "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/net.rs" 1544 ExactMatch Type
DEBUG:racer::nameres: search_local_scopes PathSegment { name: "tokio_tcp", types: [] } "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/net.rs" 1544 ExactMatch Type
DEBUG:racer::nameres: searching scope Type start: 0 point: 1544 'tokio_tcp' "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/net.rs" ExactMatch local: true, session: Session { .. }
DEBUG:racer::matchers: found use: tokio_tcp in |pub use tokio_tcp::{TcpStream, ConnectFuture};|
DEBUG:syntex_syntax::parse::lexer: scanning whitespace: Some(TokenAndSpan { tok: Whitespace, sp: Span { lo: BytePos(3), hi: BytePos(4), expn_id: ExpnId(4294967295) } })
DEBUG:syntex_syntax::codemap: byte pos BytePos(0) is on the line at byte pos BytePos(0)
DEBUG:syntex_syntax::codemap: char pos CharPos(0) is on the line at char pos CharPos(0)
DEBUG:syntex_syntax::codemap: byte is on line: 1
DEBUG:syntex_syntax::parse::attr: parse_outer_attributes: self.token=Ident(pub#0)
DEBUG:syntex_syntax::parse::lexer: scanning whitespace: Some(TokenAndSpan { tok: Whitespace, sp: Span { lo: BytePos(7), hi: BytePos(8), expn_id: ExpnId(4294967295) } })
DEBUG:syntex_syntax::parse::lexer: scanning whitespace: Some(TokenAndSpan { tok: Whitespace, sp: Span { lo: BytePos(30), hi: BytePos(31), expn_id: ExpnId(4294967295) } })
DEBUG:syntex_syntax::parse::attr: parse_outer_attributes: self.token=Eof
DEBUG:racer::matchers: import pub use tokio_tcp::{TcpListener, Incoming}; involved in a cycle; ignoring
DEBUG:racer::nameres: search_scope found matches ExactMatch []
DEBUG:racer::nameres: search_crate_root |PathSegment { name: "tokio_tcp", types: [] }| "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/net.rs"
DEBUG:racer::nameres: going to search for PathSegment { name: "tokio_tcp", types: [] } in crateroot "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs"
DEBUG:racer::nameres: resolve_name tokio_tcp "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs" 0 ExactMatch Type
DEBUG:racer::nameres: search_local_scopes PathSegment { name: "tokio_tcp", types: [] } "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs" 0 ExactMatch Type
DEBUG:racer::nameres: searching scope Type start: 0 point: 0 'tokio_tcp' "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs" ExactMatch local: true, session: Session { .. }
DEBUG:racer::matchers: found an extern crate: |extern crate tokio_tcp;|
DEBUG:syntex_syntax::parse::lexer: scanning whitespace: Some(TokenAndSpan { tok: Whitespace, sp: Span { lo: BytePos(6), hi: BytePos(7), expn_id: ExpnId(4294967295) } })
DEBUG:syntex_syntax::codemap: byte pos BytePos(0) is on the line at byte pos BytePos(0)
DEBUG:syntex_syntax::codemap: char pos CharPos(0) is on the line at char pos CharPos(0)
DEBUG:syntex_syntax::codemap: byte is on line: 1
DEBUG:syntex_syntax::parse::attr: parse_outer_attributes: self.token=Ident(extern#0)
DEBUG:syntex_syntax::parse::lexer: scanning whitespace: Some(TokenAndSpan { tok: Whitespace, sp: Span { lo: BytePos(12), hi: BytePos(13), expn_id: ExpnId(4294967295) } })
DEBUG:racer::matchers: extern crate tokio_tcp
DEBUG:racer::nameres: get_crate_file tokio_tcp, "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs"
DEBUG:racer::cargo: get_crate_file: from_path="/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs"
DEBUG:racer::cargo: get_local_packages found table {"badges": Table({"appveyor": Table({"repository": String("carllerche/tokio")}), "travis-ci": Table({"repository": String("tokio-rs/tokio")})}), "dependencies": Table({"futures": Table({"version": String("0.1.20")}), "futures2": Table({"optional": Boolean(true), "version": String("0.1.0")}), "mio": Table({"version": String("0.6.14")}), "tokio-executor": Table({"version": String("0.1.2")}), "tokio-io": Table({"version": String("0.1.6")}), "tokio-reactor": Table({"version": String("0.1.1")}), "tokio-tcp": Table({"version": String("0.1.0")}), "tokio-threadpool": Table({"version": String("0.1.2")}), "tokio-timer": Table({"version": String("0.2.0")}), "tokio-udp": Table({"version": String("0.1.0")})}), "dev-dependencies": Table({"bytes": Table({"version": String("0.4")}), "env_logger": Table({"default-features": Boolean(false), "version": String("0.4")}), "flate2": Table({"features": Array([String("tokio")]), "version": String("1")}), "futures-cpupool": Table({"version": String("0.1")}), "http": Table({"version": String("0.1")}), "httparse": Table({"version": String("1.0")}), "libc": Table({"version": String("0.2")}), "num_cpus": Table({"version": String("1.0")}), "serde": Table({"version": String("1.0")}), "serde_derive": Table({"version": String("1.0")}), "serde_json": Table({"version": String("1.0")}), "time": Table({"version": String("0.1")})}), "features": Table({"default": Array([]), "unstable-futures": Array([String("futures2"), String("tokio-reactor/unstable-futures"), String("tokio-threadpool/unstable-futures"), String("tokio-executor/unstable-futures"), String("tokio-tcp/unstable-futures"), String("tokio-udp/unstable-futures")])}), "package": Table({"authors": Array([String("Carl Lerche <me@carllerche.com>")]), "categories": Array([String("asynchronous"), String("network-programming")]), "description": String("An event-driven, non-blocking I/O platform for writing asynchronous I/O\nbacked applications.\n"), "documentation": String("https://docs.rs/tokio/0.1"), "homepage": String("https://tokio.rs"), "keywords": Array([String("io"), String("async"), String("non-blocking"), String("futures")]), "license": String("MIT"), "name": String("tokio"), "readme": String("README.md"), "repository": String("https://github.com/tokio-rs/tokio"), "version": String("0.1.5")})};getting packages for section 'dependencies'
DEBUG:racer::cargo: get_local_packages found table {"badges": Table({"appveyor": Table({"repository": String("carllerche/tokio")}), "travis-ci": Table({"repository": String("tokio-rs/tokio")})}), "dependencies": Table({"futures": Table({"version": String("0.1.20")}), "futures2": Table({"optional": Boolean(true), "version": String("0.1.0")}), "mio": Table({"version": String("0.6.14")}), "tokio-executor": Table({"version": String("0.1.2")}), "tokio-io": Table({"version": String("0.1.6")}), "tokio-reactor": Table({"version": String("0.1.1")}), "tokio-tcp": Table({"version": String("0.1.0")}), "tokio-threadpool": Table({"version": String("0.1.2")}), "tokio-timer": Table({"version": String("0.2.0")}), "tokio-udp": Table({"version": String("0.1.0")})}), "dev-dependencies": Table({"bytes": Table({"version": String("0.4")}), "env_logger": Table({"default-features": Boolean(false), "version": String("0.4")}), "flate2": Table({"features": Array([String("tokio")]), "version": String("1")}), "futures-cpupool": Table({"version": String("0.1")}), "http": Table({"version": String("0.1")}), "httparse": Table({"version": String("1.0")}), "libc": Table({"version": String("0.2")}), "num_cpus": Table({"version": String("1.0")}), "serde": Table({"version": String("1.0")}), "serde_derive": Table({"version": String("1.0")}), "serde_json": Table({"version": String("1.0")}), "time": Table({"version": String("0.1")})}), "features": Table({"default": Array([]), "unstable-futures": Array([String("futures2"), String("tokio-reactor/unstable-futures"), String("tokio-threadpool/unstable-futures"), String("tokio-executor/unstable-futures"), String("tokio-tcp/unstable-futures"), String("tokio-udp/unstable-futures")])}), "package": Table({"authors": Array([String("Carl Lerche <me@carllerche.com>")]), "categories": Array([String("asynchronous"), String("network-programming")]), "description": String("An event-driven, non-blocking I/O platform for writing asynchronous I/O\nbacked applications.\n"), "documentation": String("https://docs.rs/tokio/0.1"), "homepage": String("https://tokio.rs"), "keywords": Array([String("io"), String("async"), String("non-blocking"), String("futures")]), "license": String("MIT"), "name": String("tokio"), "readme": String("README.md"), "repository": String("https://github.com/tokio-rs/tokio"), "version": String("0.1.5")})};getting packages for section 'dev-dependencies'
DEBUG:racer::nameres: search_closure_args found valid closure arg scope: |e|
DEBUG:racer::nameres: search_scope found matches ExactMatch []
DEBUG:racer::nameres: search_crate_root |PathSegment { name: "tokio_tcp", types: [] }| "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs"
DEBUG:racer::nameres: search_prelude file PathSegment { name: "tokio_tcp", types: [] } ExactMatch Type
DEBUG:racer::nameres: searching scope Type start: 0 point: 0 'tokio_tcp' "/Users/zhaoyao/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/src/libstd/prelude/v1.rs" ExactMatch local: true, session: Session { .. }
DEBUG:racer::nameres: search_scope found matches ExactMatch []
DEBUG:racer::nameres: search_prelude file PathSegment { name: "tokio_tcp", types: [] } ExactMatch Type
DEBUG:racer::nameres: searching scope Type start: 0 point: 0 'tokio_tcp' "/Users/zhaoyao/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/src/libstd/prelude/v1.rs" ExactMatch local: true, session: Session { .. }
DEBUG:racer::nameres: search_scope found matches ExactMatch []
DEBUG:racer::nameres: resolve_path returning []
DEBUG:racer::nameres: resolve_path P[tokio_tcp::Incoming] "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/net.rs" 1544 ExactMatch
DEBUG:racer::nameres: resolve_path P[tokio_tcp] "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/net.rs" 1544 ExactMatch
DEBUG:racer::nameres: resolve_name tokio_tcp "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/net.rs" 1544 ExactMatch Type
DEBUG:racer::nameres: search_local_scopes PathSegment { name: "tokio_tcp", types: [] } "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/net.rs" 1544 ExactMatch Type
DEBUG:racer::nameres: searching scope Type start: 0 point: 1544 'tokio_tcp' "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/net.rs" ExactMatch local: true, session: Session { .. }
DEBUG:racer::matchers: found use: tokio_tcp in |pub use tokio_tcp::{TcpStream, ConnectFuture};|
DEBUG:syntex_syntax::parse::lexer: scanning whitespace: Some(TokenAndSpan { tok: Whitespace, sp: Span { lo: BytePos(3), hi: BytePos(4), expn_id: ExpnId(4294967295) } })
DEBUG:syntex_syntax::codemap: byte pos BytePos(0) is on the line at byte pos BytePos(0)
DEBUG:syntex_syntax::codemap: char pos CharPos(0) is on the line at char pos CharPos(0)
DEBUG:syntex_syntax::codemap: byte is on line: 1
DEBUG:syntex_syntax::parse::attr: parse_outer_attributes: self.token=Ident(pub#0)
DEBUG:syntex_syntax::parse::lexer: scanning whitespace: Some(TokenAndSpan { tok: Whitespace, sp: Span { lo: BytePos(7), hi: BytePos(8), expn_id: ExpnId(4294967295) } })
DEBUG:syntex_syntax::parse::lexer: scanning whitespace: Some(TokenAndSpan { tok: Whitespace, sp: Span { lo: BytePos(30), hi: BytePos(31), expn_id: ExpnId(4294967295) } })
DEBUG:syntex_syntax::parse::attr: parse_outer_attributes: self.token=Eof
DEBUG:racer::matchers: import pub use tokio_tcp::{TcpListener, Incoming}; involved in a cycle; ignoring
DEBUG:racer::nameres: search_scope found matches ExactMatch []
DEBUG:racer::nameres: search_crate_root |PathSegment { name: "tokio_tcp", types: [] }| "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/net.rs"
DEBUG:racer::nameres: going to search for PathSegment { name: "tokio_tcp", types: [] } in crateroot "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs"
DEBUG:racer::nameres: resolve_name tokio_tcp "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs" 0 ExactMatch Type
DEBUG:racer::nameres: search_local_scopes PathSegment { name: "tokio_tcp", types: [] } "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs" 0 ExactMatch Type
DEBUG:racer::nameres: searching scope Type start: 0 point: 0 'tokio_tcp' "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs" ExactMatch local: true, session: Session { .. }
DEBUG:racer::matchers: found an extern crate: |extern crate tokio_tcp;|
DEBUG:syntex_syntax::parse::lexer: scanning whitespace: Some(TokenAndSpan { tok: Whitespace, sp: Span { lo: BytePos(6), hi: BytePos(7), expn_id: ExpnId(4294967295) } })
DEBUG:syntex_syntax::codemap: byte pos BytePos(0) is on the line at byte pos BytePos(0)
DEBUG:syntex_syntax::codemap: char pos CharPos(0) is on the line at char pos CharPos(0)
DEBUG:syntex_syntax::codemap: byte is on line: 1
DEBUG:syntex_syntax::parse::attr: parse_outer_attributes: self.token=Ident(extern#0)
DEBUG:syntex_syntax::parse::lexer: scanning whitespace: Some(TokenAndSpan { tok: Whitespace, sp: Span { lo: BytePos(12), hi: BytePos(13), expn_id: ExpnId(4294967295) } })
DEBUG:racer::matchers: extern crate tokio_tcp
DEBUG:racer::nameres: get_crate_file tokio_tcp, "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs"
DEBUG:racer::cargo: get_crate_file: from_path="/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs"
DEBUG:racer::cargo: get_local_packages found table {"badges": Table({"appveyor": Table({"repository": String("carllerche/tokio")}), "travis-ci": Table({"repository": String("tokio-rs/tokio")})}), "dependencies": Table({"futures": Table({"version": String("0.1.20")}), "futures2": Table({"optional": Boolean(true), "version": String("0.1.0")}), "mio": Table({"version": String("0.6.14")}), "tokio-executor": Table({"version": String("0.1.2")}), "tokio-io": Table({"version": String("0.1.6")}), "tokio-reactor": Table({"version": String("0.1.1")}), "tokio-tcp": Table({"version": String("0.1.0")}), "tokio-threadpool": Table({"version": String("0.1.2")}), "tokio-timer": Table({"version": String("0.2.0")}), "tokio-udp": Table({"version": String("0.1.0")})}), "dev-dependencies": Table({"bytes": Table({"version": String("0.4")}), "env_logger": Table({"default-features": Boolean(false), "version": String("0.4")}), "flate2": Table({"features": Array([String("tokio")]), "version": String("1")}), "futures-cpupool": Table({"version": String("0.1")}), "http": Table({"version": String("0.1")}), "httparse": Table({"version": String("1.0")}), "libc": Table({"version": String("0.2")}), "num_cpus": Table({"version": String("1.0")}), "serde": Table({"version": String("1.0")}), "serde_derive": Table({"version": String("1.0")}), "serde_json": Table({"version": String("1.0")}), "time": Table({"version": String("0.1")})}), "features": Table({"default": Array([]), "unstable-futures": Array([String("futures2"), String("tokio-reactor/unstable-futures"), String("tokio-threadpool/unstable-futures"), String("tokio-executor/unstable-futures"), String("tokio-tcp/unstable-futures"), String("tokio-udp/unstable-futures")])}), "package": Table({"authors": Array([String("Carl Lerche <me@carllerche.com>")]), "categories": Array([String("asynchronous"), String("network-programming")]), "description": String("An event-driven, non-blocking I/O platform for writing asynchronous I/O\nbacked applications.\n"), "documentation": String("https://docs.rs/tokio/0.1"), "homepage": String("https://tokio.rs"), "keywords": Array([String("io"), String("async"), String("non-blocking"), String("futures")]), "license": String("MIT"), "name": String("tokio"), "readme": String("README.md"), "repository": String("https://github.com/tokio-rs/tokio"), "version": String("0.1.5")})};getting packages for section 'dependencies'
DEBUG:racer::cargo: get_local_packages found table {"badges": Table({"appveyor": Table({"repository": String("carllerche/tokio")}), "travis-ci": Table({"repository": String("tokio-rs/tokio")})}), "dependencies": Table({"futures": Table({"version": String("0.1.20")}), "futures2": Table({"optional": Boolean(true), "version": String("0.1.0")}), "mio": Table({"version": String("0.6.14")}), "tokio-executor": Table({"version": String("0.1.2")}), "tokio-io": Table({"version": String("0.1.6")}), "tokio-reactor": Table({"version": String("0.1.1")}), "tokio-tcp": Table({"version": String("0.1.0")}), "tokio-threadpool": Table({"version": String("0.1.2")}), "tokio-timer": Table({"version": String("0.2.0")}), "tokio-udp": Table({"version": String("0.1.0")})}), "dev-dependencies": Table({"bytes": Table({"version": String("0.4")}), "env_logger": Table({"default-features": Boolean(false), "version": String("0.4")}), "flate2": Table({"features": Array([String("tokio")]), "version": String("1")}), "futures-cpupool": Table({"version": String("0.1")}), "http": Table({"version": String("0.1")}), "httparse": Table({"version": String("1.0")}), "libc": Table({"version": String("0.2")}), "num_cpus": Table({"version": String("1.0")}), "serde": Table({"version": String("1.0")}), "serde_derive": Table({"version": String("1.0")}), "serde_json": Table({"version": String("1.0")}), "time": Table({"version": String("0.1")})}), "features": Table({"default": Array([]), "unstable-futures": Array([String("futures2"), String("tokio-reactor/unstable-futures"), String("tokio-threadpool/unstable-futures"), String("tokio-executor/unstable-futures"), String("tokio-tcp/unstable-futures"), String("tokio-udp/unstable-futures")])}), "package": Table({"authors": Array([String("Carl Lerche <me@carllerche.com>")]), "categories": Array([String("asynchronous"), String("network-programming")]), "description": String("An event-driven, non-blocking I/O platform for writing asynchronous I/O\nbacked applications.\n"), "documentation": String("https://docs.rs/tokio/0.1"), "homepage": String("https://tokio.rs"), "keywords": Array([String("io"), String("async"), String("non-blocking"), String("futures")]), "license": String("MIT"), "name": String("tokio"), "readme": String("README.md"), "repository": String("https://github.com/tokio-rs/tokio"), "version": String("0.1.5")})};getting packages for section 'dev-dependencies'
DEBUG:racer::nameres: search_closure_args found valid closure arg scope: |e|
DEBUG:racer::nameres: search_scope found matches ExactMatch []
DEBUG:racer::nameres: search_crate_root |PathSegment { name: "tokio_tcp", types: [] }| "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs"
DEBUG:racer::nameres: search_prelude file PathSegment { name: "tokio_tcp", types: [] } ExactMatch Type
DEBUG:racer::nameres: searching scope Type start: 0 point: 0 'tokio_tcp' "/Users/zhaoyao/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/src/libstd/prelude/v1.rs" ExactMatch local: true, session: Session { .. }
DEBUG:racer::nameres: search_scope found matches ExactMatch []
DEBUG:racer::nameres: search_prelude file PathSegment { name: "tokio_tcp", types: [] } ExactMatch Type
DEBUG:racer::nameres: searching scope Type start: 0 point: 0 'tokio_tcp' "/Users/zhaoyao/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/src/libstd/prelude/v1.rs" ExactMatch local: true, session: Session { .. }
DEBUG:racer::nameres: search_scope found matches ExactMatch []
DEBUG:racer::nameres: resolve_path returning []
DEBUG:racer::matchers: found use:  in |pub use tokio_udp::{UdpSocket, UdpFramed, SendDgram, RecvDgram};|
DEBUG:syntex_syntax::parse::lexer: scanning whitespace: Some(TokenAndSpan { tok: Whitespace, sp: Span { lo: BytePos(3), hi: BytePos(4), expn_id: ExpnId(4294967295) } })
DEBUG:syntex_syntax::codemap: byte pos BytePos(0) is on the line at byte pos BytePos(0)
DEBUG:syntex_syntax::codemap: char pos CharPos(0) is on the line at char pos CharPos(0)
DEBUG:syntex_syntax::codemap: byte is on line: 1
DEBUG:syntex_syntax::parse::attr: parse_outer_attributes: self.token=Ident(pub#0)
DEBUG:syntex_syntax::parse::lexer: scanning whitespace: Some(TokenAndSpan { tok: Whitespace, sp: Span { lo: BytePos(7), hi: BytePos(8), expn_id: ExpnId(4294967295) } })
DEBUG:syntex_syntax::parse::lexer: scanning whitespace: Some(TokenAndSpan { tok: Whitespace, sp: Span { lo: BytePos(30), hi: BytePos(31), expn_id: ExpnId(4294967295) } })
DEBUG:syntex_syntax::parse::lexer: scanning whitespace: Some(TokenAndSpan { tok: Whitespace, sp: Span { lo: BytePos(41), hi: BytePos(42), expn_id: ExpnId(4294967295) } })
DEBUG:syntex_syntax::parse::lexer: scanning whitespace: Some(TokenAndSpan { tok: Whitespace, sp: Span { lo: BytePos(52), hi: BytePos(53), expn_id: ExpnId(4294967295) } })
DEBUG:syntex_syntax::parse::attr: parse_outer_attributes: self.token=Eof
DEBUG:racer::nameres: resolve_path P[tokio_udp::UdpSocket] "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/net.rs" 1588 ExactMatch
DEBUG:racer::nameres: resolve_path P[tokio_udp] "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/net.rs" 1588 ExactMatch
DEBUG:racer::nameres: resolve_name tokio_udp "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/net.rs" 1588 ExactMatch Type
DEBUG:racer::nameres: search_local_scopes PathSegment { name: "tokio_udp", types: [] } "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/net.rs" 1588 ExactMatch Type
DEBUG:racer::nameres: searching scope Type start: 0 point: 1588 'tokio_udp' "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/net.rs" ExactMatch local: true, session: Session { .. }
DEBUG:racer::matchers: import pub use tokio_udp::{UdpSocket, UdpFramed, SendDgram, RecvDgram}; involved in a cycle; ignoring
DEBUG:racer::nameres: search_scope found matches ExactMatch []
DEBUG:racer::nameres: search_crate_root |PathSegment { name: "tokio_udp", types: [] }| "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/net.rs"
DEBUG:racer::nameres: going to search for PathSegment { name: "tokio_udp", types: [] } in crateroot "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs"
DEBUG:racer::nameres: resolve_name tokio_udp "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs" 0 ExactMatch Type
DEBUG:racer::nameres: search_local_scopes PathSegment { name: "tokio_udp", types: [] } "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs" 0 ExactMatch Type
DEBUG:racer::nameres: searching scope Type start: 0 point: 0 'tokio_udp' "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs" ExactMatch local: true, session: Session { .. }
DEBUG:racer::matchers: found an extern crate: |extern crate tokio_udp;|
DEBUG:syntex_syntax::parse::lexer: scanning whitespace: Some(TokenAndSpan { tok: Whitespace, sp: Span { lo: BytePos(6), hi: BytePos(7), expn_id: ExpnId(4294967295) } })
DEBUG:syntex_syntax::codemap: byte pos BytePos(0) is on the line at byte pos BytePos(0)
DEBUG:syntex_syntax::codemap: char pos CharPos(0) is on the line at char pos CharPos(0)
DEBUG:syntex_syntax::codemap: byte is on line: 1
DEBUG:syntex_syntax::parse::attr: parse_outer_attributes: self.token=Ident(extern#0)
DEBUG:syntex_syntax::parse::lexer: scanning whitespace: Some(TokenAndSpan { tok: Whitespace, sp: Span { lo: BytePos(12), hi: BytePos(13), expn_id: ExpnId(4294967295) } })
DEBUG:racer::matchers: extern crate tokio_udp
DEBUG:racer::nameres: get_crate_file tokio_udp, "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs"
DEBUG:racer::cargo: get_crate_file: from_path="/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs"
DEBUG:racer::cargo: get_local_packages found table {"badges": Table({"appveyor": Table({"repository": String("carllerche/tokio")}), "travis-ci": Table({"repository": String("tokio-rs/tokio")})}), "dependencies": Table({"futures": Table({"version": String("0.1.20")}), "futures2": Table({"optional": Boolean(true), "version": String("0.1.0")}), "mio": Table({"version": String("0.6.14")}), "tokio-executor": Table({"version": String("0.1.2")}), "tokio-io": Table({"version": String("0.1.6")}), "tokio-reactor": Table({"version": String("0.1.1")}), "tokio-tcp": Table({"version": String("0.1.0")}), "tokio-threadpool": Table({"version": String("0.1.2")}), "tokio-timer": Table({"version": String("0.2.0")}), "tokio-udp": Table({"version": String("0.1.0")})}), "dev-dependencies": Table({"bytes": Table({"version": String("0.4")}), "env_logger": Table({"default-features": Boolean(false), "version": String("0.4")}), "flate2": Table({"features": Array([String("tokio")]), "version": String("1")}), "futures-cpupool": Table({"version": String("0.1")}), "http": Table({"version": String("0.1")}), "httparse": Table({"version": String("1.0")}), "libc": Table({"version": String("0.2")}), "num_cpus": Table({"version": String("1.0")}), "serde": Table({"version": String("1.0")}), "serde_derive": Table({"version": String("1.0")}), "serde_json": Table({"version": String("1.0")}), "time": Table({"version": String("0.1")})}), "features": Table({"default": Array([]), "unstable-futures": Array([String("futures2"), String("tokio-reactor/unstable-futures"), String("tokio-threadpool/unstable-futures"), String("tokio-executor/unstable-futures"), String("tokio-tcp/unstable-futures"), String("tokio-udp/unstable-futures")])}), "package": Table({"authors": Array([String("Carl Lerche <me@carllerche.com>")]), "categories": Array([String("asynchronous"), String("network-programming")]), "description": String("An event-driven, non-blocking I/O platform for writing asynchronous I/O\nbacked applications.\n"), "documentation": String("https://docs.rs/tokio/0.1"), "homepage": String("https://tokio.rs"), "keywords": Array([String("io"), String("async"), String("non-blocking"), String("futures")]), "license": String("MIT"), "name": String("tokio"), "readme": String("README.md"), "repository": String("https://github.com/tokio-rs/tokio"), "version": String("0.1.5")})};getting packages for section 'dependencies'
DEBUG:racer::cargo: get_local_packages found table {"badges": Table({"appveyor": Table({"repository": String("carllerche/tokio")}), "travis-ci": Table({"repository": String("tokio-rs/tokio")})}), "dependencies": Table({"futures": Table({"version": String("0.1.20")}), "futures2": Table({"optional": Boolean(true), "version": String("0.1.0")}), "mio": Table({"version": String("0.6.14")}), "tokio-executor": Table({"version": String("0.1.2")}), "tokio-io": Table({"version": String("0.1.6")}), "tokio-reactor": Table({"version": String("0.1.1")}), "tokio-tcp": Table({"version": String("0.1.0")}), "tokio-threadpool": Table({"version": String("0.1.2")}), "tokio-timer": Table({"version": String("0.2.0")}), "tokio-udp": Table({"version": String("0.1.0")})}), "dev-dependencies": Table({"bytes": Table({"version": String("0.4")}), "env_logger": Table({"default-features": Boolean(false), "version": String("0.4")}), "flate2": Table({"features": Array([String("tokio")]), "version": String("1")}), "futures-cpupool": Table({"version": String("0.1")}), "http": Table({"version": String("0.1")}), "httparse": Table({"version": String("1.0")}), "libc": Table({"version": String("0.2")}), "num_cpus": Table({"version": String("1.0")}), "serde": Table({"version": String("1.0")}), "serde_derive": Table({"version": String("1.0")}), "serde_json": Table({"version": String("1.0")}), "time": Table({"version": String("0.1")})}), "features": Table({"default": Array([]), "unstable-futures": Array([String("futures2"), String("tokio-reactor/unstable-futures"), String("tokio-threadpool/unstable-futures"), String("tokio-executor/unstable-futures"), String("tokio-tcp/unstable-futures"), String("tokio-udp/unstable-futures")])}), "package": Table({"authors": Array([String("Carl Lerche <me@carllerche.com>")]), "categories": Array([String("asynchronous"), String("network-programming")]), "description": String("An event-driven, non-blocking I/O platform for writing asynchronous I/O\nbacked applications.\n"), "documentation": String("https://docs.rs/tokio/0.1"), "homepage": String("https://tokio.rs"), "keywords": Array([String("io"), String("async"), String("non-blocking"), String("futures")]), "license": String("MIT"), "name": String("tokio"), "readme": String("README.md"), "repository": String("https://github.com/tokio-rs/tokio"), "version": String("0.1.5")})};getting packages for section 'dev-dependencies'
DEBUG:racer::nameres: search_closure_args found valid closure arg scope: |e|
DEBUG:racer::nameres: search_scope found matches ExactMatch []
DEBUG:racer::nameres: search_crate_root |PathSegment { name: "tokio_udp", types: [] }| "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs"
DEBUG:racer::nameres: search_prelude file PathSegment { name: "tokio_udp", types: [] } ExactMatch Type
DEBUG:racer::nameres: searching scope Type start: 0 point: 0 'tokio_udp' "/Users/zhaoyao/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/src/libstd/prelude/v1.rs" ExactMatch local: true, session: Session { .. }
DEBUG:racer::nameres: search_scope found matches ExactMatch []
DEBUG:racer::nameres: search_prelude file PathSegment { name: "tokio_udp", types: [] } ExactMatch Type
DEBUG:racer::nameres: searching scope Type start: 0 point: 0 'tokio_udp' "/Users/zhaoyao/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/src/libstd/prelude/v1.rs" ExactMatch local: true, session: Session { .. }
DEBUG:racer::nameres: search_scope found matches ExactMatch []
DEBUG:racer::nameres: resolve_path returning []
DEBUG:racer::nameres: resolve_path P[tokio_udp::UdpFramed] "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/net.rs" 1588 ExactMatch
DEBUG:racer::nameres: resolve_path P[tokio_udp] "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/net.rs" 1588 ExactMatch
DEBUG:racer::nameres: resolve_name tokio_udp "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/net.rs" 1588 ExactMatch Type
DEBUG:racer::nameres: search_local_scopes PathSegment { name: "tokio_udp", types: [] } "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/net.rs" 1588 ExactMatch Type
DEBUG:racer::nameres: searching scope Type start: 0 point: 1588 'tokio_udp' "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/net.rs" ExactMatch local: true, session: Session { .. }
DEBUG:racer::matchers: import pub use tokio_udp::{UdpSocket, UdpFramed, SendDgram, RecvDgram}; involved in a cycle; ignoring
DEBUG:racer::nameres: search_scope found matches ExactMatch []
DEBUG:racer::nameres: search_crate_root |PathSegment { name: "tokio_udp", types: [] }| "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/net.rs"
DEBUG:racer::nameres: going to search for PathSegment { name: "tokio_udp", types: [] } in crateroot "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs"
DEBUG:racer::nameres: resolve_name tokio_udp "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs" 0 ExactMatch Type
DEBUG:racer::nameres: search_local_scopes PathSegment { name: "tokio_udp", types: [] } "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs" 0 ExactMatch Type
DEBUG:racer::nameres: searching scope Type start: 0 point: 0 'tokio_udp' "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs" ExactMatch local: true, session: Session { .. }
DEBUG:racer::matchers: found an extern crate: |extern crate tokio_udp;|
DEBUG:syntex_syntax::parse::lexer: scanning whitespace: Some(TokenAndSpan { tok: Whitespace, sp: Span { lo: BytePos(6), hi: BytePos(7), expn_id: ExpnId(4294967295) } })
DEBUG:syntex_syntax::codemap: byte pos BytePos(0) is on the line at byte pos BytePos(0)
DEBUG:syntex_syntax::codemap: char pos CharPos(0) is on the line at char pos CharPos(0)
DEBUG:syntex_syntax::codemap: byte is on line: 1
DEBUG:syntex_syntax::parse::attr: parse_outer_attributes: self.token=Ident(extern#0)
DEBUG:syntex_syntax::parse::lexer: scanning whitespace: Some(TokenAndSpan { tok: Whitespace, sp: Span { lo: BytePos(12), hi: BytePos(13), expn_id: ExpnId(4294967295) } })
DEBUG:racer::matchers: extern crate tokio_udp
DEBUG:racer::nameres: get_crate_file tokio_udp, "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs"
DEBUG:racer::cargo: get_crate_file: from_path="/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs"
DEBUG:racer::cargo: get_local_packages found table {"badges": Table({"appveyor": Table({"repository": String("carllerche/tokio")}), "travis-ci": Table({"repository": String("tokio-rs/tokio")})}), "dependencies": Table({"futures": Table({"version": String("0.1.20")}), "futures2": Table({"optional": Boolean(true), "version": String("0.1.0")}), "mio": Table({"version": String("0.6.14")}), "tokio-executor": Table({"version": String("0.1.2")}), "tokio-io": Table({"version": String("0.1.6")}), "tokio-reactor": Table({"version": String("0.1.1")}), "tokio-tcp": Table({"version": String("0.1.0")}), "tokio-threadpool": Table({"version": String("0.1.2")}), "tokio-timer": Table({"version": String("0.2.0")}), "tokio-udp": Table({"version": String("0.1.0")})}), "dev-dependencies": Table({"bytes": Table({"version": String("0.4")}), "env_logger": Table({"default-features": Boolean(false), "version": String("0.4")}), "flate2": Table({"features": Array([String("tokio")]), "version": String("1")}), "futures-cpupool": Table({"version": String("0.1")}), "http": Table({"version": String("0.1")}), "httparse": Table({"version": String("1.0")}), "libc": Table({"version": String("0.2")}), "num_cpus": Table({"version": String("1.0")}), "serde": Table({"version": String("1.0")}), "serde_derive": Table({"version": String("1.0")}), "serde_json": Table({"version": String("1.0")}), "time": Table({"version": String("0.1")})}), "features": Table({"default": Array([]), "unstable-futures": Array([String("futures2"), String("tokio-reactor/unstable-futures"), String("tokio-threadpool/unstable-futures"), String("tokio-executor/unstable-futures"), String("tokio-tcp/unstable-futures"), String("tokio-udp/unstable-futures")])}), "package": Table({"authors": Array([String("Carl Lerche <me@carllerche.com>")]), "categories": Array([String("asynchronous"), String("network-programming")]), "description": String("An event-driven, non-blocking I/O platform for writing asynchronous I/O\nbacked applications.\n"), "documentation": String("https://docs.rs/tokio/0.1"), "homepage": String("https://tokio.rs"), "keywords": Array([String("io"), String("async"), String("non-blocking"), String("futures")]), "license": String("MIT"), "name": String("tokio"), "readme": String("README.md"), "repository": String("https://github.com/tokio-rs/tokio"), "version": String("0.1.5")})};getting packages for section 'dependencies'
DEBUG:racer::cargo: get_local_packages found table {"badges": Table({"appveyor": Table({"repository": String("carllerche/tokio")}), "travis-ci": Table({"repository": String("tokio-rs/tokio")})}), "dependencies": Table({"futures": Table({"version": String("0.1.20")}), "futures2": Table({"optional": Boolean(true), "version": String("0.1.0")}), "mio": Table({"version": String("0.6.14")}), "tokio-executor": Table({"version": String("0.1.2")}), "tokio-io": Table({"version": String("0.1.6")}), "tokio-reactor": Table({"version": String("0.1.1")}), "tokio-tcp": Table({"version": String("0.1.0")}), "tokio-threadpool": Table({"version": String("0.1.2")}), "tokio-timer": Table({"version": String("0.2.0")}), "tokio-udp": Table({"version": String("0.1.0")})}), "dev-dependencies": Table({"bytes": Table({"version": String("0.4")}), "env_logger": Table({"default-features": Boolean(false), "version": String("0.4")}), "flate2": Table({"features": Array([String("tokio")]), "version": String("1")}), "futures-cpupool": Table({"version": String("0.1")}), "http": Table({"version": String("0.1")}), "httparse": Table({"version": String("1.0")}), "libc": Table({"version": String("0.2")}), "num_cpus": Table({"version": String("1.0")}), "serde": Table({"version": String("1.0")}), "serde_derive": Table({"version": String("1.0")}), "serde_json": Table({"version": String("1.0")}), "time": Table({"version": String("0.1")})}), "features": Table({"default": Array([]), "unstable-futures": Array([String("futures2"), String("tokio-reactor/unstable-futures"), String("tokio-threadpool/unstable-futures"), String("tokio-executor/unstable-futures"), String("tokio-tcp/unstable-futures"), String("tokio-udp/unstable-futures")])}), "package": Table({"authors": Array([String("Carl Lerche <me@carllerche.com>")]), "categories": Array([String("asynchronous"), String("network-programming")]), "description": String("An event-driven, non-blocking I/O platform for writing asynchronous I/O\nbacked applications.\n"), "documentation": String("https://docs.rs/tokio/0.1"), "homepage": String("https://tokio.rs"), "keywords": Array([String("io"), String("async"), String("non-blocking"), String("futures")]), "license": String("MIT"), "name": String("tokio"), "readme": String("README.md"), "repository": String("https://github.com/tokio-rs/tokio"), "version": String("0.1.5")})};getting packages for section 'dev-dependencies'
DEBUG:racer::nameres: search_closure_args found valid closure arg scope: |e|
DEBUG:racer::nameres: search_scope found matches ExactMatch []
DEBUG:racer::nameres: search_crate_root |PathSegment { name: "tokio_udp", types: [] }| "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs"
DEBUG:racer::nameres: search_prelude file PathSegment { name: "tokio_udp", types: [] } ExactMatch Type
DEBUG:racer::nameres: searching scope Type start: 0 point: 0 'tokio_udp' "/Users/zhaoyao/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/src/libstd/prelude/v1.rs" ExactMatch local: true, session: Session { .. }
DEBUG:racer::nameres: search_scope found matches ExactMatch []
DEBUG:racer::nameres: search_prelude file PathSegment { name: "tokio_udp", types: [] } ExactMatch Type
DEBUG:racer::nameres: searching scope Type start: 0 point: 0 'tokio_udp' "/Users/zhaoyao/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/src/libstd/prelude/v1.rs" ExactMatch local: true, session: Session { .. }
DEBUG:racer::nameres: search_scope found matches ExactMatch []
DEBUG:racer::nameres: resolve_path returning []
DEBUG:racer::nameres: resolve_path P[tokio_udp::SendDgram] "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/net.rs" 1588 ExactMatch
DEBUG:racer::nameres: resolve_path P[tokio_udp] "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/net.rs" 1588 ExactMatch
DEBUG:racer::nameres: resolve_name tokio_udp "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/net.rs" 1588 ExactMatch Type
DEBUG:racer::nameres: search_local_scopes PathSegment { name: "tokio_udp", types: [] } "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/net.rs" 1588 ExactMatch Type
DEBUG:racer::nameres: searching scope Type start: 0 point: 1588 'tokio_udp' "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/net.rs" ExactMatch local: true, session: Session { .. }
DEBUG:racer::matchers: import pub use tokio_udp::{UdpSocket, UdpFramed, SendDgram, RecvDgram}; involved in a cycle; ignoring
DEBUG:racer::nameres: search_scope found matches ExactMatch []
DEBUG:racer::nameres: search_crate_root |PathSegment { name: "tokio_udp", types: [] }| "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/net.rs"
DEBUG:racer::nameres: going to search for PathSegment { name: "tokio_udp", types: [] } in crateroot "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs"
DEBUG:racer::nameres: resolve_name tokio_udp "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs" 0 ExactMatch Type
DEBUG:racer::nameres: search_local_scopes PathSegment { name: "tokio_udp", types: [] } "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs" 0 ExactMatch Type
DEBUG:racer::nameres: searching scope Type start: 0 point: 0 'tokio_udp' "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs" ExactMatch local: true, session: Session { .. }
DEBUG:racer::matchers: found an extern crate: |extern crate tokio_udp;|
DEBUG:syntex_syntax::parse::lexer: scanning whitespace: Some(TokenAndSpan { tok: Whitespace, sp: Span { lo: BytePos(6), hi: BytePos(7), expn_id: ExpnId(4294967295) } })
DEBUG:syntex_syntax::codemap: byte pos BytePos(0) is on the line at byte pos BytePos(0)
DEBUG:syntex_syntax::codemap: char pos CharPos(0) is on the line at char pos CharPos(0)
DEBUG:syntex_syntax::codemap: byte is on line: 1
DEBUG:syntex_syntax::parse::attr: parse_outer_attributes: self.token=Ident(extern#0)
DEBUG:syntex_syntax::parse::lexer: scanning whitespace: Some(TokenAndSpan { tok: Whitespace, sp: Span { lo: BytePos(12), hi: BytePos(13), expn_id: ExpnId(4294967295) } })
DEBUG:racer::matchers: extern crate tokio_udp
DEBUG:racer::nameres: get_crate_file tokio_udp, "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs"
DEBUG:racer::cargo: get_crate_file: from_path="/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs"
DEBUG:racer::cargo: get_local_packages found table {"badges": Table({"appveyor": Table({"repository": String("carllerche/tokio")}), "travis-ci": Table({"repository": String("tokio-rs/tokio")})}), "dependencies": Table({"futures": Table({"version": String("0.1.20")}), "futures2": Table({"optional": Boolean(true), "version": String("0.1.0")}), "mio": Table({"version": String("0.6.14")}), "tokio-executor": Table({"version": String("0.1.2")}), "tokio-io": Table({"version": String("0.1.6")}), "tokio-reactor": Table({"version": String("0.1.1")}), "tokio-tcp": Table({"version": String("0.1.0")}), "tokio-threadpool": Table({"version": String("0.1.2")}), "tokio-timer": Table({"version": String("0.2.0")}), "tokio-udp": Table({"version": String("0.1.0")})}), "dev-dependencies": Table({"bytes": Table({"version": String("0.4")}), "env_logger": Table({"default-features": Boolean(false), "version": String("0.4")}), "flate2": Table({"features": Array([String("tokio")]), "version": String("1")}), "futures-cpupool": Table({"version": String("0.1")}), "http": Table({"version": String("0.1")}), "httparse": Table({"version": String("1.0")}), "libc": Table({"version": String("0.2")}), "num_cpus": Table({"version": String("1.0")}), "serde": Table({"version": String("1.0")}), "serde_derive": Table({"version": String("1.0")}), "serde_json": Table({"version": String("1.0")}), "time": Table({"version": String("0.1")})}), "features": Table({"default": Array([]), "unstable-futures": Array([String("futures2"), String("tokio-reactor/unstable-futures"), String("tokio-threadpool/unstable-futures"), String("tokio-executor/unstable-futures"), String("tokio-tcp/unstable-futures"), String("tokio-udp/unstable-futures")])}), "package": Table({"authors": Array([String("Carl Lerche <me@carllerche.com>")]), "categories": Array([String("asynchronous"), String("network-programming")]), "description": String("An event-driven, non-blocking I/O platform for writing asynchronous I/O\nbacked applications.\n"), "documentation": String("https://docs.rs/tokio/0.1"), "homepage": String("https://tokio.rs"), "keywords": Array([String("io"), String("async"), String("non-blocking"), String("futures")]), "license": String("MIT"), "name": String("tokio"), "readme": String("README.md"), "repository": String("https://github.com/tokio-rs/tokio"), "version": String("0.1.5")})};getting packages for section 'dependencies'
DEBUG:racer::cargo: get_local_packages found table {"badges": Table({"appveyor": Table({"repository": String("carllerche/tokio")}), "travis-ci": Table({"repository": String("tokio-rs/tokio")})}), "dependencies": Table({"futures": Table({"version": String("0.1.20")}), "futures2": Table({"optional": Boolean(true), "version": String("0.1.0")}), "mio": Table({"version": String("0.6.14")}), "tokio-executor": Table({"version": String("0.1.2")}), "tokio-io": Table({"version": String("0.1.6")}), "tokio-reactor": Table({"version": String("0.1.1")}), "tokio-tcp": Table({"version": String("0.1.0")}), "tokio-threadpool": Table({"version": String("0.1.2")}), "tokio-timer": Table({"version": String("0.2.0")}), "tokio-udp": Table({"version": String("0.1.0")})}), "dev-dependencies": Table({"bytes": Table({"version": String("0.4")}), "env_logger": Table({"default-features": Boolean(false), "version": String("0.4")}), "flate2": Table({"features": Array([String("tokio")]), "version": String("1")}), "futures-cpupool": Table({"version": String("0.1")}), "http": Table({"version": String("0.1")}), "httparse": Table({"version": String("1.0")}), "libc": Table({"version": String("0.2")}), "num_cpus": Table({"version": String("1.0")}), "serde": Table({"version": String("1.0")}), "serde_derive": Table({"version": String("1.0")}), "serde_json": Table({"version": String("1.0")}), "time": Table({"version": String("0.1")})}), "features": Table({"default": Array([]), "unstable-futures": Array([String("futures2"), String("tokio-reactor/unstable-futures"), String("tokio-threadpool/unstable-futures"), String("tokio-executor/unstable-futures"), String("tokio-tcp/unstable-futures"), String("tokio-udp/unstable-futures")])}), "package": Table({"authors": Array([String("Carl Lerche <me@carllerche.com>")]), "categories": Array([String("asynchronous"), String("network-programming")]), "description": String("An event-driven, non-blocking I/O platform for writing asynchronous I/O\nbacked applications.\n"), "documentation": String("https://docs.rs/tokio/0.1"), "homepage": String("https://tokio.rs"), "keywords": Array([String("io"), String("async"), String("non-blocking"), String("futures")]), "license": String("MIT"), "name": String("tokio"), "readme": String("README.md"), "repository": String("https://github.com/tokio-rs/tokio"), "version": String("0.1.5")})};getting packages for section 'dev-dependencies'
DEBUG:racer::nameres: search_closure_args found valid closure arg scope: |e|
DEBUG:racer::nameres: search_scope found matches ExactMatch []
DEBUG:racer::nameres: search_crate_root |PathSegment { name: "tokio_udp", types: [] }| "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs"
DEBUG:racer::nameres: search_prelude file PathSegment { name: "tokio_udp", types: [] } ExactMatch Type
DEBUG:racer::nameres: searching scope Type start: 0 point: 0 'tokio_udp' "/Users/zhaoyao/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/src/libstd/prelude/v1.rs" ExactMatch local: true, session: Session { .. }
DEBUG:racer::nameres: search_scope found matches ExactMatch []
DEBUG:racer::nameres: search_prelude file PathSegment { name: "tokio_udp", types: [] } ExactMatch Type
DEBUG:racer::nameres: searching scope Type start: 0 point: 0 'tokio_udp' "/Users/zhaoyao/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/src/libstd/prelude/v1.rs" ExactMatch local: true, session: Session { .. }
DEBUG:racer::nameres: search_scope found matches ExactMatch []
DEBUG:racer::nameres: resolve_path returning []
DEBUG:racer::nameres: resolve_path P[tokio_udp::RecvDgram] "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/net.rs" 1588 ExactMatch
DEBUG:racer::nameres: resolve_path P[tokio_udp] "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/net.rs" 1588 ExactMatch
DEBUG:racer::nameres: resolve_name tokio_udp "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/net.rs" 1588 ExactMatch Type
DEBUG:racer::nameres: search_local_scopes PathSegment { name: "tokio_udp", types: [] } "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/net.rs" 1588 ExactMatch Type
DEBUG:racer::nameres: searching scope Type start: 0 point: 1588 'tokio_udp' "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/net.rs" ExactMatch local: true, session: Session { .. }
DEBUG:racer::matchers: import pub use tokio_udp::{UdpSocket, UdpFramed, SendDgram, RecvDgram}; involved in a cycle; ignoring
DEBUG:racer::nameres: search_scope found matches ExactMatch []
DEBUG:racer::nameres: search_crate_root |PathSegment { name: "tokio_udp", types: [] }| "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/net.rs"
DEBUG:racer::nameres: going to search for PathSegment { name: "tokio_udp", types: [] } in crateroot "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs"
DEBUG:racer::nameres: resolve_name tokio_udp "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs" 0 ExactMatch Type
DEBUG:racer::nameres: search_local_scopes PathSegment { name: "tokio_udp", types: [] } "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs" 0 ExactMatch Type
DEBUG:racer::nameres: searching scope Type start: 0 point: 0 'tokio_udp' "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs" ExactMatch local: true, session: Session { .. }
DEBUG:racer::matchers: found an extern crate: |extern crate tokio_udp;|
DEBUG:syntex_syntax::parse::lexer: scanning whitespace: Some(TokenAndSpan { tok: Whitespace, sp: Span { lo: BytePos(6), hi: BytePos(7), expn_id: ExpnId(4294967295) } })
DEBUG:syntex_syntax::codemap: byte pos BytePos(0) is on the line at byte pos BytePos(0)
DEBUG:syntex_syntax::codemap: char pos CharPos(0) is on the line at char pos CharPos(0)
DEBUG:syntex_syntax::codemap: byte is on line: 1
DEBUG:syntex_syntax::parse::attr: parse_outer_attributes: self.token=Ident(extern#0)
DEBUG:syntex_syntax::parse::lexer: scanning whitespace: Some(TokenAndSpan { tok: Whitespace, sp: Span { lo: BytePos(12), hi: BytePos(13), expn_id: ExpnId(4294967295) } })
DEBUG:racer::matchers: extern crate tokio_udp
DEBUG:racer::nameres: get_crate_file tokio_udp, "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs"
DEBUG:racer::cargo: get_crate_file: from_path="/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs"
DEBUG:racer::cargo: get_local_packages found table {"badges": Table({"appveyor": Table({"repository": String("carllerche/tokio")}), "travis-ci": Table({"repository": String("tokio-rs/tokio")})}), "dependencies": Table({"futures": Table({"version": String("0.1.20")}), "futures2": Table({"optional": Boolean(true), "version": String("0.1.0")}), "mio": Table({"version": String("0.6.14")}), "tokio-executor": Table({"version": String("0.1.2")}), "tokio-io": Table({"version": String("0.1.6")}), "tokio-reactor": Table({"version": String("0.1.1")}), "tokio-tcp": Table({"version": String("0.1.0")}), "tokio-threadpool": Table({"version": String("0.1.2")}), "tokio-timer": Table({"version": String("0.2.0")}), "tokio-udp": Table({"version": String("0.1.0")})}), "dev-dependencies": Table({"bytes": Table({"version": String("0.4")}), "env_logger": Table({"default-features": Boolean(false), "version": String("0.4")}), "flate2": Table({"features": Array([String("tokio")]), "version": String("1")}), "futures-cpupool": Table({"version": String("0.1")}), "http": Table({"version": String("0.1")}), "httparse": Table({"version": String("1.0")}), "libc": Table({"version": String("0.2")}), "num_cpus": Table({"version": String("1.0")}), "serde": Table({"version": String("1.0")}), "serde_derive": Table({"version": String("1.0")}), "serde_json": Table({"version": String("1.0")}), "time": Table({"version": String("0.1")})}), "features": Table({"default": Array([]), "unstable-futures": Array([String("futures2"), String("tokio-reactor/unstable-futures"), String("tokio-threadpool/unstable-futures"), String("tokio-executor/unstable-futures"), String("tokio-tcp/unstable-futures"), String("tokio-udp/unstable-futures")])}), "package": Table({"authors": Array([String("Carl Lerche <me@carllerche.com>")]), "categories": Array([String("asynchronous"), String("network-programming")]), "description": String("An event-driven, non-blocking I/O platform for writing asynchronous I/O\nbacked applications.\n"), "documentation": String("https://docs.rs/tokio/0.1"), "homepage": String("https://tokio.rs"), "keywords": Array([String("io"), String("async"), String("non-blocking"), String("futures")]), "license": String("MIT"), "name": String("tokio"), "readme": String("README.md"), "repository": String("https://github.com/tokio-rs/tokio"), "version": String("0.1.5")})};getting packages for section 'dependencies'
DEBUG:racer::cargo: get_local_packages found table {"badges": Table({"appveyor": Table({"repository": String("carllerche/tokio")}), "travis-ci": Table({"repository": String("tokio-rs/tokio")})}), "dependencies": Table({"futures": Table({"version": String("0.1.20")}), "futures2": Table({"optional": Boolean(true), "version": String("0.1.0")}), "mio": Table({"version": String("0.6.14")}), "tokio-executor": Table({"version": String("0.1.2")}), "tokio-io": Table({"version": String("0.1.6")}), "tokio-reactor": Table({"version": String("0.1.1")}), "tokio-tcp": Table({"version": String("0.1.0")}), "tokio-threadpool": Table({"version": String("0.1.2")}), "tokio-timer": Table({"version": String("0.2.0")}), "tokio-udp": Table({"version": String("0.1.0")})}), "dev-dependencies": Table({"bytes": Table({"version": String("0.4")}), "env_logger": Table({"default-features": Boolean(false), "version": String("0.4")}), "flate2": Table({"features": Array([String("tokio")]), "version": String("1")}), "futures-cpupool": Table({"version": String("0.1")}), "http": Table({"version": String("0.1")}), "httparse": Table({"version": String("1.0")}), "libc": Table({"version": String("0.2")}), "num_cpus": Table({"version": String("1.0")}), "serde": Table({"version": String("1.0")}), "serde_derive": Table({"version": String("1.0")}), "serde_json": Table({"version": String("1.0")}), "time": Table({"version": String("0.1")})}), "features": Table({"default": Array([]), "unstable-futures": Array([String("futures2"), String("tokio-reactor/unstable-futures"), String("tokio-threadpool/unstable-futures"), String("tokio-executor/unstable-futures"), String("tokio-tcp/unstable-futures"), String("tokio-udp/unstable-futures")])}), "package": Table({"authors": Array([String("Carl Lerche <me@carllerche.com>")]), "categories": Array([String("asynchronous"), String("network-programming")]), "description": String("An event-driven, non-blocking I/O platform for writing asynchronous I/O\nbacked applications.\n"), "documentation": String("https://docs.rs/tokio/0.1"), "homepage": String("https://tokio.rs"), "keywords": Array([String("io"), String("async"), String("non-blocking"), String("futures")]), "license": String("MIT"), "name": String("tokio"), "readme": String("README.md"), "repository": String("https://github.com/tokio-rs/tokio"), "version": String("0.1.5")})};getting packages for section 'dev-dependencies'
DEBUG:racer::nameres: search_closure_args found valid closure arg scope: |e|
DEBUG:racer::nameres: search_scope found matches ExactMatch []
DEBUG:racer::nameres: search_crate_root |PathSegment { name: "tokio_udp", types: [] }| "/Users/zhaoyao/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.5/src/lib.rs"
DEBUG:racer::nameres: search_prelude file PathSegment { name: "tokio_udp", types: [] } ExactMatch Type
DEBUG:racer::nameres: searching scope Type start: 0 point: 0 'tokio_udp' "/Users/zhaoyao/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/src/libstd/prelude/v1.rs" ExactMatch local: true, session: Session { .. }
DEBUG:racer::nameres: search_scope found matches ExactMatch []
DEBUG:racer::nameres: search_prelude file PathSegment { name: "tokio_udp", types: [] } ExactMatch Type
DEBUG:racer::nameres: searching scope Type start: 0 point: 0 'tokio_udp' "/Users/zhaoyao/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/src/libstd/prelude/v1.rs" ExactMatch local: true, session: Session { .. }
DEBUG:racer::nameres: search_scope found matches ExactMatch []
DEBUG:racer::nameres: resolve_path returning []
DEBUG:racer::nameres: search_scope found matches StartsWith []
DEBUG:racer::nameres: resolve_path returning []
END
